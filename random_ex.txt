streaming model Random(size):
    properties:
        durable=False
        reliable=False
        records = size

    schema:
        time=TimeStampField(auto_add=True)
        value = IntegerField(default=1000)

replicated model UpdateFrequency(size):
    properties:
        durable = False
        reliable = False
        buffer_size = size

    schema:
        frequency = IntegerField(default=1000)

controller RandomControllerEmbedded(tier):
    mFreq = tier.models.frequency
    mRandom = tier.models.random
    random_source = tier.sources.random
    random_timer = tier.sources.timer
    boot_event = tier.sources.boot
    running = False

    event boot_event.booted(context ctx):
        if ctx.error is SUCCESS:
            random_timer.start_periodic(mFreq.frequency)
            running = True
        else:
            error = mError.create()
            error.context=ctx
            error.save()

    event mFreq.arrived(context ctx):
        random_timer.stop()
        random_timer.start_periodic(mFreq.frequency)

    event random_timer.fired(context ctx):
        rand = mRandom.create()
        rand.value = random_source.read()
        rand.save()

    event mRandom.full(context ctx):
        random_timer.stop()
        running = False

    event mRandom.departed(context ctx):
        if not running:
            random_timer.start_periodic(mFreq.frequency)
            running = True

space EmbeddedSpace:
    platform:
        language = CLang
        templates=nrf52
        system = nrf52Platform.v12


    models:
        random=Random(size=10)
        frequency=UpdateFrequency(size=1)

    controllers:
        rndcnt = RandomControllerEmbedded(tier=self)

    sources:
        random = platform.system.random
        boot = platform.system.boot
        timer = platform.system.timer