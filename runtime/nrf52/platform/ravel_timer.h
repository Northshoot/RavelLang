#ifndef RAVEL_TIMER_H
#define RAVEL_TIMER_H

#include <stdbool.h>
#include "boards.h"
#include "nrf_drv_gpiote.h"
#include "app_error.h"
#include "app_timer.h"
#include "nrf_drv_clock.h"
#include "ravel_error.h"
#include "module.h"



/**
 * Driver abstraction for the timer
 */
//TODO: should configurable on the application level

#define MAX_TIMERS 4
#define APP_TIMER_ENABLED 1
// General application timer settings.
#define APP_TIMER_PRESCALER              15
#define APP_TIMER_OP_QUEUE_SIZE          4





#ifdef __cplusplus
extern "C" {
#endif

//timer structure
typedef struct {
    int __id;
    uint32_t t0;
    uint32_t dt;
    bool __is_one_shoot;
    bool __is_running;
    bool __reserved;
} DriverTimer;

typedef void (*timer_fired_event_handlers)(int timer_id, void * cntx);

DriverTimer m_timers[MAX_TIMERS];

/**
 * innitialize timer module
 * @return RAVEL_DRIVER_ERROR
 */
RAVEL_DRIVER_ERROR init_module();
/**
 * Create new timer with ID
 * @param timer
 * @param id autogenerated timer ID
 * @return
 */
RAVEL_DRIVER_ERROR init_timer_module();
RAVEL_DRIVER_ERROR create_new_timer(DriverTimer *timer, int id);
RAVEL_DRIVER_ERROR timer_start_periodic(DriverTimer *timer,uint32_t time);
RAVEL_DRIVER_ERROR timer_start_single_shoot(DriverTimer *timer, uint32_t time);
RAVEL_DRIVER_ERROR timer_cancel(DriverTimer *timer);
RAVEL_DRIVER_ERROR timer_cancel_all(void);

#ifdef __cplusplus
}
#endif
#endif //RAVEL_TIMER_H