import "ai/harmony/ravel/api/lang/c/tmpl/common.stg"

c_file(includes,name,interface) ::=<<
<begin_source(name)>

#include "api/endpoint.h"
#include "api/array.h"
<includes:do_include(); separator="\n">

RavelEndpoint *
ravel_generated_<name; format="function">_select(<name> *self, <interface.baseInterface.models.phase_model.name> *pphase_model)
{
    return NULL;
}

int32_t
ravel_generated_<name; format="function">_compute_pphase(<name> *self, double *vibration)
{
    return 0;
}
int32_t
ravel_generated_<name; format="function">_sparsity(<name> *self, double *vibration)
{
    return 0;
}

int32_t *
ravel_generated_<name; format="function">_compressing_sampling(<name> *self, double *vibration)
{
    return ravel_array_new(0, sizeof(int32_t));
}



>>

h_file(includes,name,interface) ::=<<
<begin_header("LIBRARY", name)>

#include "api/endpoint.h"
#include "api/array.h"
<includes:do_include(); separator="\n">

<begin_extern_c()>

typedef struct {
    int dummy;
} <name>;

static inline void ravel_generated_<name; format="function">_init(<name> *self, int instance_id<append_parameter_list(interface.baseInterface.parameters)>) {}
static inline void ravel_generated_<name; format="function">_finalize(<name> *self) {}

RavelEndpoint *ravel_generated_<name; format="function">_select(<name> *self, <interface.baseInterface.models.phase_model.name> *pphase_model);
int32_t ravel_generated_<name; format="function">_compute_pphase(<name> *self, double *vibration);
int32_t ravel_generated_<name; format="function">_sparsity(<name> *self, double *vibration);
int32_t ravel_generated_<name; format="function">_compressing_sampling(<name> *self, double *vibration);

<end_extern_c()>
<end_header("", name)>
>>