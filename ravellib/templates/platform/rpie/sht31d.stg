import "edu/stanford/ravel/api/lang/java/tmpl/common.stg"

file(package,imports,name,interface) ::=<<
package <package>;



<imports:do_import()>
import com.pi4j.io.i2c.I2CBus;
import com.pi4j.io.i2c.I2CDevice;
import com.pi4j.io.i2c.I2CFactory;
import java.io.IOException;

public class <name>
{

    private double cTemp ;
    private double fTemp ;
    private double humidity ;
    private byte[] data;

	public TempHumSource( AppDispatcher dispatcher, int instanceId )
	{


	}


	    private synchronized void read_source(){
            try{
                I2CBus bus = I2CFactory.getInstance(I2CBus.BUS_1);
                // Get I2C device, SHT31 I2C address is 0x44(68)
                I2CDevice device = bus.getDevice(0x44);

                // Send high repeatability measurement command
                // Command msb, command lsb
                byte[] config = new byte[2];
                config[0] = (byte)0x2C;
                config[1] = (byte)0x06;
                device.write(config, 0, 2);
                Thread.sleep(500);

                // Read 6 bytes of data
                // temp msb, temp lsb, temp CRC, humidity msb, humidity lsb, humidity CRC
                byte[] data = new byte[6];
                device.read(data, 0, 6);

                cTemp = ((((data[0] & 0xFF) * 256) + (data[1] & 0xFF)) * 175.0) / 65535.0  - 45.0;
                fTemp = ((((data[0] & 0xFF) * 256) + (data[1] & 0xFF)) * 315.0) / 65535.0 - 49.0;
                humidity = ((((data[3] & 0xFF) * 256) + (data[4] & 0xFF)) * 100.0) / 65535.0;
            } catch (IOException e) {
                e.printStackTrace();
            } catch (Exception e){
                e.printStackTrace();
            }

     }

	   public double readTemperature() {
	        read_source();
            return fTemp;
        }

        public double readHumidity() {
            //read_source();
            return humidity;
        }

}


>>