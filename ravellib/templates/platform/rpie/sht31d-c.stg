import "edu/stanford/ravel/api/lang/c/tmpl/common.stg"

c_file(includes,name,interface) ::=<<
<begin_source(name)>
#include \<unistd.h>
#include \<stdio.h>
#include \<stdlib.h>
#include \<linux/i2c-dev.h>
#include \<sys/ioctl.h>
#include \<fcntl.h>
<includes:do_include(); separator="\n">

double temp = 0;
double hum = 0;

void read_sensors(){
    int file;
    char *bus = "/dev/i2c-0";
    if((file = open(bus, O_RDWR)) \< 0)
    {
        printf("Failed to open the bus. \n");
        exit(1);
    }
    // Get I2C device, SHT31 I2C address is 0x44(68)
    ioctl(file, I2C_SLAVE, 0x44);

    // Send high repeatability measurement command
    // Command msb, command lsb(0x2C, 0x06)
    char config[2] = {0};
    config[0] = 0x2C;
    config[1] = 0x06;
    write(file, config, 2);
    sleep(1);

    // Read 6 bytes of data
    // temp msb, temp lsb, temp CRC, humidity msb, humidity lsb, humidity CRC
    char data[6] = {0};
    if(read(file, data, 6) != 6)
    {
        printf("Error : Input/output Error \n");
    }
    else
    {
    // Convert the data
    //double cTemp = (((data[0] * 256) + data[1]) * 175.0) / 65535.0  - 45.0;
    temp = (((data[0] * 256) + data[1]) * 315.0) / 65535.0 - 49.0;
    hum = (((data[3] * 256) + data[4])) * 100.0 / 65535.0;
    }
}
 //TODO: this is quick solution and it must be read temperature, then humidity
double
ravel_generated_<name; format="function">_read_temperature(<name> *self)
{
    read_sensors();
    return temp;
}
double
ravel_generated_<name; format="function">_read_humidity(<name> *self)
{
    return hum;
}
>>

h_file(includes,name,interface) ::=<<
<begin_header("LIBRARY", name)>

<includes:do_include(); separator="\n">

<begin_extern_c()>

typedef struct {
    int dummy;
} <name>;

static inline void ravel_generated_<name; format="function">_init(<name> *self, int instance_id<append_parameter_list(interface.baseInterface.parameters)>) {}
static inline void ravel_generated_<name; format="function">_finalize(<name> *self) {}

double ravel_generated_<name; format="function">_read_temperature(<name> *self);
double ravel_generated_<name; format="function">_read_humidity(<name> *self);

<end_extern_c()>
<end_header("", name)>
>>