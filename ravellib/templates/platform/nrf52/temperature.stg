import "ai/harmony/ravel/api/lang/c/tmpl/common.stg"

extra_cflags() ::=<<
>>
extra_ldflags() ::=<<
>>

extra_includes() ::=<<

>>

c_file(includes,name,interface) ::=<<
<begin_source(name)>
<begin_source(name)>

#include \<stdbool.h>
#include \<stdint.h>
#include \<stdio.h>
#include "nrf.h"
#include "nrf_temp.h"
#include "app_error.h"
#include "bsp.h"
#define NRF_LOG_MODULE_NAME "TMP:::"
#define NRF_LOG_LEVEL 1
#include "nrf_log.h"
#include "nrf_log_ctrl.h"



<includes:do_include(); separator="\n">

void
ravel_generated_<name; format="function">_init(<name> *self, int instance_id<append_parameter_list(interface.baseInterface.parameters)>)
{


}
void
ravel_generated_<name; format="function">_finalize(<name> *self)
{
}

double
ravel_generated_<name; format="function">_read_temperature(<name>  *self<name>)
{
    int32_t temp;
    double far = 0;
    sd_temp_get(&temp);
    far = temp/4;
    far =1.8 * far + 32;
    NRF_LOG_DEBUG("Actual temperature: %f\r\n", far);
    return far;
}

double
ravel_generated_<name; format="function">_read_humidity(<name>  *self<name>)
{
    return 52.2;
}

<interface.controllerList:define_set_controller_method(name); separator="\n">

>>

h_file(includes,name,interface) ::=<<
<begin_header("LIBRARY", name)>
#include \<stdint.h>
/* Forward declare our controller class before we include the model headers */
typedef struct s_<name> <name>;

<includes:do_include(); separator="\n">

<begin_extern_c()>

typedef struct s_<name> {
    int __id;
    <interface.controllerList:{c|<c.component.name> *ctr_<c.varName>;}; separator="\n">
} <name>;

void ravel_generated_<name; format="function">_init(<name> *self, int instance_id<append_parameter_list(interface.baseInterface.parameters)>);
void ravel_generated_<name; format="function">_finalize(<name>  *self<name>);

double ravel_generated_<name; format="function">_read_temperature(<name>  *self<name>);
double ravel_generated_<name; format="function">_read_humidity(<name>  *self<name>);

<interface.controllerList:declare_set_controller_method(name); separator="\n">

<end_extern_c()>
<end_header("", name)>
>>
