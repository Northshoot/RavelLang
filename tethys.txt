replicated model AppDevice():
    properties:
        log = ALL
        durable = True
        size = 1

    schema:
        id = IntegerField()
        type = StringField()
        hw_v = NumberField()
        sw_v = NumberField()
        first_boot = BooleanField(default=True)
        last_reboot = DateTimeField(auto_add=True)
        error = StringField()

streaming model BootError(size):
    properties:
        reliable = True
        durable = True
        buffer_size = size

    schema:
        time = DateTimeField(auto_add=True)
        error = ContextField()

controller EmBootstrapController(tier):
    app_device = tier.models.AppDevice
    app_config = tier.models.AppConfig
    boot_error = tier.models.BootError
    system = tier.platform.system
    boot = tier.platform.system.boot
    timer = tier.platform.timer
	

    event boot.booted(context cntx):
        timer.startPeriodic(app_config.adc_sampling)
        rec = app_device.get_or_create()
        rec.error=cntx.error
        rec.save()


    event app_device.save_done(context cntx):
        if cntx.error is not SUCCESS:
            rec = boot_error.create()
            rec.error = cntx
            rec.save()


    event app_device.full(context cntx):
        delete app_device.first()
	

replicated model AppConfig():
    properties:
        log = ALL
        durable = True
        reliable = True

    schema:
        device = ModelField( from_model="AppDevice" )
        ble_broadcast = IntegerField(default=1500)
        adc_sampling = IntegerField(default=1000)



replicated model GatewayAppConfig(buffer_size):
    properties:
        origin = [GatewaySpace, CloudSpace]
        destination = [GatewaySpace, CloudSpace]
        log = ALL
        durable = True
        size = buffer_size
	

    schema:
        id = IntegerField()
        type = StringField()
        hw_v = NumberField()
        sw_v = NumberField()
        first_boot = BooleanField(default=True)
        last_reboot = DateTimeField(auto_add=True)
        error = StringField()


### Application MVC
local model ADCModel():
    properties:
        durable = False
        size = 250

    schema:
        adc = IntegerField()
    

local model Measurement():
    properties:
        durable = True
        size = 50

    schema:
        time = TimeStampField(auto_add_on_save=True)
        temperature = IntegerField()
        voltage = IntegerField()
    

streaming model MeasurementPacket(size):
    properties:
        reliable = True
        durable = True
        buffer_size = size

    schema:
        measurement = ByteField()

controller MeasurementController(tier, source):
    temp = source.temperature
    voltage = source.voltage
    timer = tier.platform.timer
    measurement_model = tier.models.Measurement
    adc_model = tier.models.ADCMode
    error_margin = 0.9
    

    event timer.expired(context c):
        vol = voltage.READ
        prev = adc_model.last()
    

    # model events, produced after save
    event measurement_model.saveDone(context c):
        if c.error == SUCCESS:
            delete measurement_model.first()
    

    event adc_model.full(context c):
        # we have 250 records of ADC, lets create a measurement
        m = measurement_model.create()
        m.temperature = temp.READ
        m.voltage = transforms.FFT(adc_model.voltage)
        m.save() #save measurement
        adc_model.clear() #delete all values in queue
    


local model NumberOfPackets():
    properties:
        size = 1

    schema:
        number_of_packets = IntegerField()


controller NumberOfPacketsController(tier):
    measurement = tier.models.measurement_packet
    number_packets = tier.models.numer_packets

    event measurement.arrived(context cntx):
        n = number_packets.last()
        number_packets.number_og_packets = n+1
        number_of_packets.save()
    


space EmbeddedSpace:
    platform:
        language = clang
        templates=nrf52
        system=nrf52.apiv1
        boot = system.boot

	models:
	    AppDevice = AppDevice()
	    AppConfig = AppConfig()
	    BootError = BootError(size=30)
	    ADCMode = ADCModel()
	    Measurement = Measurement()
		MeasurementPacket = MeasurementPacket(size=500)
    

	controllers:
	    boot=EmBootstrapController(self)
		measure = MeasurementController(self, sources)
    

	sources:
		temperature = platform.system.Temperature
		voltage = platform.system.VoltageIO
    


space GatewaySpace:
    platform:
        system = android.api23
        templates = android23
    

    models:
        app_config = GatewayAppConfig(size=5)
        num_packets = NumberOfPackets()
    

    controllers:
        packet_counter = NumberOfPacketsController(self)


space CloudSpace:
    platform:
	    language = python
		templates = django2
		system = django.apiv2

    

	models:
	    device = AppDevice
		temp = TemperatureModel
		device = DeviceModel
		embedded_config = EmbeddedAppConfig
    

	controllers:
	    bootstrap = EmBootstrapController
		temp_c = MeasurementController
    

	views:
	    device_config = AppDeviceEditor
	    device_app_config = EmbeddedAppConfigView
    

    sinks:
        db = sqlite3
    
