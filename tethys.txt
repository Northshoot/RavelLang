replicated model AppDevice():
    properties:
        origin = [EmbeddedSpace, CloudSpace]
        destination = [CloudSpace]
        log = 20
        durable = True
        size = 1
        reliable = True

    schema:
        uuid = IntegerField()
        type = StringField()
        hw_v = NumberField()
        sw_v = NumberField()
        first_boot = BooleanField(default=True)
        last_reboot = DateTimeField(auto_add=True)
        error = ContextField()

streaming model BootError(size):
    properties:
        reliable = True
        durable = True
        buffer_size = size
        origin = [EmbeddedSpace]
        destination = [CloudSpace]

    schema:
        origin = ModelField( from_model="AppDevice" )
        time = DateTimeField(auto_add=True)
        error = ContextField()

replicated model AppConfig():
    properties:
        log = ALL
        durable = True
        reliable = True
        origin = [CloudSpace]
        destination = [EmbeddedSpace]

    schema:
        device = ModelField( from_model="AppDevice" )
        frequency = IntegerField(default=1500)

controller EmBootstrapController(tier):
    app_device = tier.models.AppDevice
    boot_error = tier.models.BootError
    boot = tier.platform.system.boot
    timer = tier.platform.system.timer
	

    event boot.booted(context cntx):
        rec = app_device.create()
        rec.error=cntx.error
        rec.save()


    event app_device.save_done(context cntx):
        if cntx.error is not SUCCESS:
            rec = boot_error.create()
            rec.error = cntx
            rec.save()


    event app_device.log_full(context cntx):
        delete app_device.first()


replicated model GatewayAppConfig(buffer_size):
    properties:
        origin = [CloudSpace]
        destination = [ GatewaySpace ]
        log = ALL
        durable = True
        size = buffer_size
	

    schema:
        id = IntegerField()
        type = StringField()
        hw_v = NumberField()
        sw_v = NumberField()
        first_boot = BooleanField(default=True)
        last_reboot = DateTimeField(auto_add=True)
        error = ContextField()

controller GtwAppConfig(tier):
    app_config = tier.models.app_config
    boot_error = tier.models.BootError
    system = tier.platform.system

    event system.booted(Context ctx):
        rec = app_config.create()
        rec.error = ctx
        rec.save()

    event app_config.save_done(Context ctx):
        if ctx is not SUCCESS:
            rec = boot_error.create()
            rec.error = ctx
            rec.save()


### Application MVC
local model ADCModel():
    properties:
        durable = False
        size = 250

    schema:
        adc = IntegerField()
    

local model Measurement():
    properties:
        durable = True
        size = 50

    schema:
        time = TimeStampField(auto_add_on_save=True)
        temperature = IntegerField()
        voltage = IntegerField()
    
local model EncryptedBlob(size):
    properties:
        durable = true
        buffer_size = size

    schema:
        measurement = ByteField()

streaming model MeasurementPacket(size):
    properties:
        destination = [GatewaySpace, CloudSpace]
        reliable = True
        durable = True
        buffer_size = size

    schema:
        blob = IntegerField()
        sequence = IntegerField(auto_increment=True)
        acked = BooleanField(default=False)
        measurement = ByteField()

controller MeasurementController(tier, source):
    temp = source.temperature
    voltage = source.voltage
    timer = tier.platform.timer
    boot = tier.platform.system.boot
    fft = tier.platform.compute.fft
    ocb= tier.platform.encryption.ocb
    config = tier.models.AppConfig
    measurement_model = tier.models.Measurement
    measurement_pkt = tier.models.MeasurementPacket
    eBlob = tiers.models.EncryptedBlob
    adc_model = tier.models.ADCMode

    
    event boot.booted(Context ctx):
        timer.startPeriodic(config.frequency)

    event timer.expired(context c):
        rec = adc_model.create()
        rec.adc = voltage.READ
        rec.save()
    
    event adc_model.full(Context ctx):
        rec = measurement_model.create()
        rec.voltage = fft(adc_model)
        rec.temperature = temp.READ
        rec.save()
        adc_model.clear()

    event measurement_model.full(Context c):
        rec = MeasurementBlob.create()
        rec.measurement = ocb.encrypt(measurement_model)
        rec.save()
        measurement_model.clear()

    event eBlob.save_done(Context c):
        blob_rec = eBlob.getLast()
        pkt_size = measurement_pkt.record_size()
        number_of_pkt = eBlob.record_size()/pkt_size
        current = 0
        while current < number_of_pkt:
            rec = measurement_pkt.create()
            rec.measurement = blob_rec.getBytes(pkt_size)
            rec.save()

    event measurement_pkt.save_done(Context c):
        if c.error == SUCCESS:
            rec = c.model
            if rec.acked == True:
                last = measurement_pkt.getLast()
                if rec.blob == last.blob and rec.sequence ==last.sequence:
                    delete eBlob.get(blob = rec.blob)

local model NumberOfPackets():
    properties:
        size = 1

    schema:
        number_of_packets = IntegerField(default=0)


controller NumberOfPacketsController(tier):
    measurement = tier.models.measurement_packet
    number_packets = tier.models.number_packets
    measurement_per_pkt = 50

    event measurement.arrived(context cntx):
        n = number_packets.last()
        number_packets.number_og_packets = n+measurement_per_pkt
        number_of_packets.save()

local model DeviceLocationModel():
    properties:
        durable = false
        reliable = false

    schema:
        device = ModelField( from_model= "AppDevice" )
        location_lat = IntegerField()
        location_long = IntegerField()
        street = StringField()
        house = StringField()
        zip = StringField()
        location = StringField()
        notes = StringField()

controller SystemController(tier):
    device_bootstrap = tier.models.device
    embedded_config = tier.models.embedded_config
    gtw_config = tier.models.gtw_config
    measurement_pkt = tier.models.measurement_pkt
    measurement = tier.models.measurement
    location_model = tier.models.location_model
    api = tier.platform.system
    sink = tier.sink.db

    event measurement_pkt.arrived(Context ctx):

    event device_bootstrap.arrived(Context ctx):
        if ctx.error is SUCCESS:
            rec = ctx.model
            if rec.first_boot:
                rec.uuid = api.get_unique_uuid()
                rec.save()
                loc = location_model.create()
                loc.save()
                sink.write(loc)
            sink.write(rec)


    event embedded_config.arrived(Context ctx):
        if ctx.error is SUCCESS:
            rec = ctx.model
            sink.write(rec)

    event measurement_pkt.arrived(Context ctx):
        if ctx.error is SUCCESS:
            rec = ctx.model
            measurements = api.encryption.ocb.decrypt(rec)
            for m in measurements:
                sink.write(m)

    event location_model.arrived(Context ctx):
        if ctx.error is SUCCESS:
            rec = ctx.model
            sink.write(rec)


space EmbeddedSpace:
    platform:
        language = clang
        templates=nrf52
        system=nrf52.apiv1
        compute = system.compute

    models:
	    AppDevice = AppDevice()
	    AppConfig = AppConfig()
	    BootError = BootError(size=30)
	    ADCMode = ADCModel()
	    Measurement = Measurement()
	    MeasurementPacket = MeasurementPacket(size=500)
	    eBlob= EncryptedBlob()

    controllers:
        boot_ctr=EmBootstrapController(tier=self, source=source)
        measurement_ctr = MeasurementController(tier=self)

    
    sources:
		temperature = platform.system.Temperature
		voltage = platform.system.VoltageIO
    


space GatewaySpace:
    platform:
        system = android.api23
        templates = android23

    models:
        app_gtw_config = GatewayAppConfig()
        number_packets = NumberOfPackets()
        boot_error = BootError(size=100)

    controllers:
        packet_counter = NumberOfPacketsController(tier=self)


space CloudSpace:
    platform:
	    language = python
	    templates = django2
	    system = django.apiv2

    models:
	    device = AppDevice()
	    boot_error = BootError()
	    embedded_config = AppConfig()
	    gtw_config = GatewayAppConfig()
	    measurement = Measurement()
	    measurement_pkt = MeasurementPacket()
	    location_model = DeviceLocationModel()


    controllers:
	    bootstrap_ctr = SystemController(tier=self)
	    measurement_ctr = MeasurementController(tier=self)
    

    sinks:
        db = sqlite3
    
