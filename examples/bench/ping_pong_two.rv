interface Clock():
    implementation:
        c = "rlib/nrf52/clock.stg"
        #c = "rlib/posix/clock.stg"

    def getNow() : int32

streaming model Ping2():
    properties:
        records = 5
        flow = EmbeddedSpace -> GatewaySpace
    schema:
        value : int32
        timestamp : int32

local model Reference():
    properties:
        records = 1
        durable = False
    schema:
        value : int32


streaming model Pong():
    properties:
        records = 5
        flow = GatewaySpace -> EmbeddedSpace
    schema:
        value : int32
        timestamp : int32


controller PingController(time: Clock, ref : Reference, ping2 : Ping2, pong : Pong):
    event system.started():
        system.print("system started")
        refrec : Reference.Record
        if ref.size() == 1:
            refrec = ref.get(0)
        else:
            refrec = ref.create()
            refrec.value = 42
            ref.save(refrec)
        pingrec = ping2.create()
        pingrec.value = refrec.value
        pingrec.timestamp = time.getNow()
        ping2.save(pingrec)


    event pong.arrived():
        system.print("pong received")
        pongrec = self.record
        refrec = ref.get(0)
        rec_ok : bool = True
        if pongrec.value != refrec.value:
            system.print_number("ERROR Want :", refrec.value)
            system.print_number("ERROR Got :", pongrec.value)
            rec_ok = False

        if rec_ok:
            t_now = time.getNow() - self.record.timestamp
            system.print_number("RT: ",  t_now)
            pong.delete(self.record)
            system.print("sending ping2")
            refrec.value += 1
            ref.save(refrec)
            pingrec = ping2.create()
            pingrec.value = refrec.value
            ping2.save(pingrec)

    event ping2.departed():
        system.print("ping2 departed")

    event ping2.save_done():
        system.print("ping2 save done")
        ping2.delete(self.record)


controller PongController(ping2 : Ping2, pong : Pong):
    event ping2.arrived():
        system.print("ping2 received")
        pingrec = self.record
        system.print("value is " + (str)pingrec.value)
        pongrec = pong.create()
        pongrec.value =  pingrec.value
        pongrec.timestamp =  pingrec.timestamp
        system.print("RX: " + (str)pingrec.timestamp)s
        pong.save(pongrec)
        ping2.delete(self.record)

    event pong.departed():
        system.print("pong departed")
        pong.delete(self.record)


space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v1
        #system = Posix.v2008

    interfaces:
        clock = Clock()

    models:
        ref = Reference()
        ping2 = Ping2()
        pong = Pong()

    controllers:
        ping_cnt = PingController(time = interfaces.clock, ref = models.ref, ping2 = models.ping2, pong = models.pong)

space GatewaySpace:
    platform:
        language = JLang
        system = Android.v19
        #system = J2SE.v18

    models:
        ping2 = Ping2()
        pong = Pong()

    controllers:
        pong_cnt = PongController(ping2 = models.ping2, pong = models.pong)
