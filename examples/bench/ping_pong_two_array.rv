streaming model Ping2():
    properties:
        records = 5
        flow = EmbeddedSpace -> GatewaySpace
    schema:
        value : int32[6]

local model Reference():
    properties:
        records = 1
        durable = False
    schema:
        value : int32


streaming model Pong():
    properties:
        records = 5
        flow = GatewaySpace -> EmbeddedSpace
    schema:
        value : int32[6]


controller PingController(ref : Reference, ping2 : Ping2, pong : Pong):
    event system.started():
        system.print("system started")
        refrec : Reference.Record
        if ref.size() == 1:
            refrec = ref.get(0)
        else:
            refrec = ref.create()
            for i=0 to 6:
                refrec.value[i] = i
            ref.save(refrec)
        pingrec = ping2.create()
        for i=0 to 6:
            pingrec.value[i] = refrec.value[i]
        ping2.save(pingrec)


    event pong.arrived():
        system.print("pong received")
        pongrec = self.record
        refrec = ref.get(0)
        rec_ok : bool = True
        for i=0 to 6:
            if pongrec.value[i] != refrec.value[i]:
                system.print_number("ERROR Want :", refrec.value[i])
                system.print_number("ERROR Got :", pongrec.value[i])
                rec_ok = False

        if rec_ok:
            system.print("pong ok")
            pong.delete(self.record)
            system.print("sending ping2")
            for i=0 to 6:
                refrec.value[i] += 1
            ref.save(refrec)
            pingrec = ping2.create()
            for i=0 to 6:
                pingrec.value[i] = refrec.value[i]
            ping2.save(pingrec)

    event ping2.departed():
        system.print("ping2 departed")

    event ping2.save_done():
        system.print("ping2 save done")
        ping2.delete(self.record)


controller PongController(ping2 : Ping2, pong : Pong):
    event ping2.arrived():
        system.print("ping2 received")
        pingrec = self.record
        pongrec = pong.create()
        for i=0 to 6:
            pongrec.value[i] =  pingrec.value[i]
        pong.save(pongrec)
        ping2.delete(self.record)

    event pong.departed():
        system.print("pong departed")
        pong.delete(self.record)


space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v1
        #system = Posix.v2008

    models:
        ref = Reference()
        ping2 = Ping2()
        pong = Pong()

    controllers:
        ping_cnt = PingController(ref = models.ref, ping2 = models.ping2, pong = models.pong)

space GatewaySpace:
    platform:
        language = JLang
        system = Android.v19
        #system = J2SE.v18

    models:
        ping2 = Ping2()
        pong = Pong()

    controllers:
        pong_cnt = PongController(ping2 = models.ping2, pong = models.pong)
