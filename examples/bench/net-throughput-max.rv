interface Clock():
    implementation:
        c = "rlib/nrf52/clock.stg"
        java = "rlib/java/clock.stg"
        #c = "rlib/posix/clock.stg"

    def getNow() : int32

streaming model Ping():
    properties:
        records = 101
        durable = False
        reliable = False
        flow = EmbeddedSpace -> GatewaySpace
    schema:
        #changing the size for measurements
        counter : int32
        value : int32[2]


controller PingController( ping : Ping , clock : Clock):
    counter : int32 = 0
    t_first : int32 = 0
    time_departed : int32 = 0
    delta : int32 = 0
    first : bool = True


    event system.started():
        system.print("system started")
        pingrec = ping.create()
        pingrec.counter = counter
        ping.save(pingrec)

    event ping.departed():
        system.print("model departed")
        ## create new packet after each send
        if first:
            t_first = clock.getNow()
            first = False
        pingrec = ping.create()
        counter += 1
        ping.save(pingrec)

    event ping.save_done():
        system.print("ping save done")

    event ping.full():
        system.print("model full")
        delta = t_first - clock.getNow()
        system.print_number("All PING's :::", delta)


controller PingGTW( ping : Ping , clock : Clock):
    counter : int32 = 0


    event system.started():
        system.print("system started")


    event ping.arrived():
        #we can reuse the same controller on both gateways :)
        system.print("ping received")
        pingrec = self.record
        #counter = pingrec.value
        ##this prints in java
        system.print("ping " + (str) counter)




space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v1

    interfaces:
        clock = Clock()

    models:
        ping = Ping()

    controllers:
        ping_cnt = PingController( ping = models.ping, clock = interfaces.clock)

space GatewaySpace:
    platform:
        language = JLang
        system = Android.v19

    interfaces:
        clock = Clock()

    models:
        ping = Ping()


    controllers:
        ping_cnt = PingGTW( ping = models.ping, clock = interfaces.clock)


