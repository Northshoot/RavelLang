interface Timer():
    implementation:
        c = "rlib/nrf52/app_timer_sys.stg"
        #c = "rlib/linux/timer.stg"
    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)
    event fired()

interface Led(led_num: int32):
    configuration:
        # 0 - 3
        led_id = led_num
    implementation:
        c = "rlib/nrf52/led.stg"

    def init()
    def on()
    def off()
    def toggle()

streaming model Counter(size : int32):
    properties:
        records = size
        flow = EmbeddedSpace -> GatewaySpace

    schema:
        counter0 : int32
        counter1 : int32
        counter2 : int32
        counter3 : int32
        counter4 : int32
        counter5 : int32
        counter6 : int32
        counter7 : int32
        counter8 : int32
        counter9 : int32


controller EController(timer : Timer,
                       #led_0 : Led,
                       counter : Counter):
    value = 0
    timer_on = False

    event system.started():
        timer.start_periodic(100)
        timer_on = True

    event timer.fired():
        rec = counter.create()
        rec.counter0 = value
        value += 1
        rec.counter1 = value
        value += 1
        rec.counter2 = value
        value += 1
        rec.counter3 = value
        value += 1
        rec.counter4 = value
        value += 1
        rec.counter5 = value
        value += 1
        rec.counter6 = value
        value += 1
        rec.counter7 = value
        value += 1
        rec.counter8 = value
        value += 1
        rec.counter9 = value
        value += 1

        counter.save(rec)
        #led_0.toggle()

    event counter.full():
        system.print("model is full")
        timer.cancel()
        timer_on = False

    event counter.departed():
        if not timer_on:
            timer.start_periodic(100)
            timer_on = True
        counter.delete(self.record)

controller GCtrl(counter: Counter):
    value = 0

    event counter.arrived():
        value += 1
        rec = self.record
        system.print("Arrived counter " + (str)value)


space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v1
        #system = Posix.v2008

    interfaces:
        timer = Timer()
        #led0 = Led(led_num = 0)

    models:
        cnt = Counter(size=10)

    controllers:
        main_ctrl = EController(timer = interfaces.timer,
                                #led_0 = interfaces.led0,
                                counter = models.cnt)


space GatewaySpace:
    platform:
        language = JLang
        #system = J2SE.v18
        system = Android.v19

    models:
        cnt = Counter(size=1000)

    controllers:
        rndcnt_1 = GCtrl(counter = models.cnt)
