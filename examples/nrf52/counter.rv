from ravellib.interfaces.system import timer_nrf

interface Led(led_num: int32):
    configuration:
        # 0 - 3
        led_id = led_num
    implementation:
        c = "rlib/nrf52/led.stg"

    def init()
    def on()
    def off()
    def toggle()

streaming model Counter(size : int32):
    properties:
        records = size
        flow = EmbeddedSpace -> Gateway
    schema:
        counter0 : int32



controller EController(timer : TimerNRF,
                       #led_0 : Led,
                       counter : Counter):
    value = 0

    event system.started():
        timer.start_periodic(1000)

    event timer.fired():
        system.print("timer.fired " + (str)(value))
        rec = counter.create()
        rec.counter0 = value
        value += 1
        counter.save(rec)

    event system.connected( ep : Endpoint):
        system.print("Connected" )

    event counter.full():
        system.print("model is full")
        timer.cancel()

    event counter.departed():
        system.print("Record is out")

    event counter.save_done():
        system.print("counter.save_done()")


controller GCtrl(counter: Counter):
    value = 0

    event counter.arrived():
        value += 1
        rec = self.record
        system.print("\tArrived counter " + (str)value)




space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v56
        #system = Posix.v2008

    interfaces:
        timer = TimerNRF()
        #led0 = Led(led_num = 0)

    models:
        cnt = Counter(size=100)

    controllers:
        main_ctrl = EController(timer = interfaces.timer,
                                counter = models.cnt)


space Gateway:
    platform:
        language = JLang
        #system = J2SE.v18
        system = Android.v19

    models:
        cnt = Counter(size=1000)

    controllers:
        rndcnt_1 = GCtrl(counter = models.cnt)
