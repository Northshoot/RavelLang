interface Timer():
    implementation:
        c = "rlib/nrf52/app_timer_sys.stg"
    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)
    def is_one_shoot() : bool
    event fired()

interface Led(led_num: int32):
    configuration:
        # 0 - 3
        led_id = led_num
    implementation:
        c = "rlib/nrf52/led.stg"

    def init()
    def on()
    def off()
    def toggle()

interface Clock():
    implementation:
        c = "rlib/nrf52/clock.stg"
        #c = "rlib/posix/clock.stg"
        java = "rlib/java/clock.stg"

    def getNow() : int32

interface Button():
    implementation:
        c = "rlib/nrf52/buttons.stg"

    event pressed(button_id : int32)

interface TemperatureSource():
    implementation:
        #java = "rlib/java/temperature.stg"
        c = "rlib/nrf52/temperature.stg"

    def read(): int32

replicated model TemperatureData(size : int32):
    properties:
        records = size

    schema:
        temperature : int32
        local_time : int32
        counter : int32

controller ButtonController(btn : Button, clk: Clock,
                            tmp : TemperatureSource,
                            led : Led, timer: Timer,
                            data: TemperatureData):

    blinker = 1000
    steps = 400
    counter = 0

    event system.started():
        system.print("system started")
        timer.start_periodic(blinker)


    event btn.pressed(id  :int32):
        for i = 0 to 10 step 2:
            pass

        system.print("Button event")
        counter = (int32) (counter / steps)
        if id == 1:
            system.print("Time is: " + (str) clk.getNow())
        elif id == 2:
            system.print("Temp is: " + (str) tmp.read())
        elif id == 3:
            if blinker < 400:
                blinker = 1000
            else:
                blinker = blinker - steps
            timer.cancel()
            timer.start_periodic(blinker)
        else:

            counter += 1
            record = data.create()
            record.temperature = tmp.read()
            record.local_time=clk.getNow()
            record.counter = counter
            data.save(record, None)

    event data.save_done():
        system.print("save done")

    event data.arrived():
        system.print("arrived")
        counter = self.record.counter

    event data.full():
        data.delete(self.record)

    event timer.fired():
        led.toggle()

space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v1

    interfaces:
        btn = Button()
        clk =  Clock()
        led = Led(led_num = 1)
        timer = Timer()
        tmp = TemperatureSource()

    models:
        data = TemperatureData(size=10)

    controllers:
        btn_ctr = ButtonController(btn = interfaces.btn,
                                   clk = interfaces.clk,
                                   tmp = interfaces.tmp,
                                   led = interfaces.led,
                                   timer = interfaces.timer,
                                   data = models.data
                                   )

controller DataController(data : TemperatureData, clock : Clock):

    event data.arrived():
        arrived_data = self.record
        system.print((str) clock.getNow() + ":: received pkt: " + (str) arrived_data.counter + " temp: " + (str)arrived_data.temperature)
        self.record.counter = arrived_data.counter+1
        data.save(self.record, None)

space GatewaySpace:
    platform:
        language = JLang
        system = Android.v19

    interfaces:
        clock = Clock()
    models:
        data = TemperatureData(size=10)

    controllers:
        btn_ctr = DataController(data = models.data, clock = interfaces.clock)

space CloudSpace:
    platform:
        language = JLang
        system = J2SE.v18

    interfaces:
        clock = Clock()
    models:
        data = TemperatureData(size=10)

    controllers:
        btn_ctr = DataController(data = models.data, clock = interfaces.clock)