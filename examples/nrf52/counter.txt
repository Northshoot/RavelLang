interface Timer():
    implementation:
        c = "rlib/nrf52/app_timer_sys.stg"
    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)
    event fired()

interface Led(led_num: int32):
    configuration:
        # 0 - 3
        led_id = led_num
    implementation:
        c = "rlib/nrf52/led.stg"

    def init()
    def on()
    def off()
    def toggle()

streaming model Counter():
    properties:
        records = 10
        flow = EmbeddedSpace -> GatewaySpace

    schema:
        counter : int32

controller EController(timer : Timer, led_0 : Led, counter : Counter):
    value = 0

    event system.started():
        timer.start_periodic(1000)

    event timer.fired():
        rec = counter.create()
        rec.counter = value
        value += 1
        counter.save(rec)
        led_0.toggle()

    event counter.full():
        system.print("model is full")
        timer.cancel()

    event counter.departed():
        timer.start_periodic(1000)
        counter.delete(self.record)

controller GCtrl(counter: Counter):
    value = 0

    event counter.arrived():
        value += 1
        rec = self.record
        if rec.counter > 7:
            system.print("more than 7")

space EmbeddedSpace:
    platform:
        language = CLang
        system = Nrf52.v1

    interfaces:
        timer = Timer()
        led0 = Led(led_num = 0)

    models:
        cnt = Counter()

    controllers:
        main_ctrl = EController(timer = interfaces.timer,
                                led_0 = interfaces.led0,
                                counter = models.cnt)


space GatewaySpace:
    platform:
        language = JLang
        #system = J2SE.v18
        system = Android.v19

    models:
        cnt = Counter()

    controllers:
        rndcnt_1 = GCtrl(counter = models.cnt)
