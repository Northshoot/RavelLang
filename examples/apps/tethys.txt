replicated model AppDevice():
    properties:
        log = 20
        durable = True
        records = 1
        reliable = True

    schema:
        uuid : int32
        type : str
        hw_v : double
        sw_v : double
        first_boot : bool
        last_reboot : timestamp
        error : error_msg


streaming model BootError(size : int32):
    properties:
        reliable = True
        durable = True
        records = size

    schema:
        #origin = ModelField( from_model="AppDevice" )
        time : timestamp
        error : error_msg


replicated model AppConfig():
    properties:
        durable = True
        reliable = True

    schema:
        #device = ModelField( from_model="AppDevice" )
        frequency : int32


interface TimerSource():
    implementation:
        java = "rlib/java/timer.stg"
        # FIXME
        #c = "rlib/c/timer.stg"

    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)

    event fired()


controller EmBootstrapController(app_device : AppDevice, boot_error : BootError, timer : TimerSource):
    event system.started():
        rec = app_device.create()
        app_device.save(rec)

    event app_device.save_done():
        if self.error:
            rec = boot_error.create()
            rec.error = self.error
            boot_error.save(rec)

    event app_device.full():
        #delete app_device.first()


replicated model GatewayAppConfig(buffer_size : int32):
    properties:
        durable = True
        records = buffer_size

    schema:
        id : int32
        type : str
        hw_v : double
        sw_v : double
        first_boot : bool
        last_reboot : timestamp
        error : error_msg


controller GtwAppConfig(app_config : GatewayAppConfig, boot_error : BootError):
    event system.started():
        rec = app_config.create()
        # FIXME what's going on here?
        #rec.error = ctx
        app_config.save(rec)

    event app_config.save_done():
        if self.error:
            rec = boot_error.create()
            rec.error = self.error
            boot_error.save(rec)


### Application MVC
local model ADCModel():
    properties:
        durable = False
        records = 250

    schema:
        adc : int32


local model Measurement():
    properties:
        durable = True
        records = 50

    schema:
        time : timestamp
        temperature : int32
        voltage : int32


local model EncryptedBlob(size : int32):
    properties:
        durable = True
        records = size

    schema:
        measurement : byte[]


# FIXME?
streaming model MeasurementPacket(size : int32):
    properties:
        reliable = True
        durable = True
        records = size

    schema:
        blob : int32
        sequence : int32
        acked : bool
        measurement : byte[]


interface TemperatureSource():
    implementation:
        # FIXME
        #java = "rlib/java/temperature.stg"
        #c = "rlib/c/temperature.stg"

    def read(): int32

interface VoltageSource():
    implementation:
        # FIXME
        #java = "rlib/java/voltage.stg"
        #c = "rlib/c/voltage.stg"

    def read(): int32

interface FFT():
    implementation:
        # FIXME
        #java = "rlib/java/fft.stg"
        #c = "rlib/c/fft.stg"

    # FIXME?
    def run(input : any) : int32

interface OCBEncryption():
    implementation:
        # FIXME
        #java = "rlib/java/ocb.stg"
        #c = "rlib/c/ocb.stg"

    # FIXME?
    def encrypt(input : any) : byte[]
    # FIXME?
    def decrypt(input : byte[]) : any


controller MeasurementController(temp : TemperatureSource,
                                 voltage : VoltageSource,
                                 timer : TimerSource,
                                 fft : FFT,
                                 measurement_model : Measurement,
                                 measurement_pkt : MeasurementPacket,
                                 eBlob : EncryptedBlob,
                                 adc_model : ADCModel,
                                 ocb : OCBEncryption):
    #ocb= tier.platform.encryption.ocb

    event system.started():
        # FIXME
        #timer.start_periodic(config.frequency)
        timer.start_periodic(10000)

    event timer.fired():
        rec = adc_model.create()
        rec.adc = voltage.read()
        adc_model.save(rec)

    event adc_model.full():
        rec = measurement_model.create()
        rec.voltage = fft.run(adc_model.all())
        rec.temperature = temp.read()
        measurement_model.save(rec)
        adc_model.clear()

    event measurement_model.full():
        rec = eBlob.create()
        # FIXME
        rec.measurement = ocb.encrypt(measurement_model.all())
        eBlob.save(rec)
        measurement_model.clear()

    event eBlob.save_done():
        blob_rec = eBlob.last()
        #pkt_size = measurement_pkt.record_size()
        #number_of_pkt = eBlob.record_size()/pkt_size
        # FIXME ^
        number_of_pkt = 10
        current = 0
        # FIXME what's going on here?
        while current < number_of_pkt:
            rec = measurement_pkt.create()
            # FIXME?
            # rec.measurement = blob_rec.getBytes(pkt_size)
            measurement_pkt.save(rec)
            current += 1

    event measurement_pkt.save_done():
        if not self.error:
            rec = measurement_pkt.first()
            if rec.acked:
                last = measurement_pkt.last()
                if rec.blob == last.blob and rec.sequence == last.sequence:
                    # FIXME
                    #delete eBlob.get(blob = rec.blob)


local model NumberOfPackets():
    properties:
        records = 1

    schema:
        number_of_packets : int32


controller PacketCounter(measurement : MeasurementPacket, number_packets : NumberOfPackets):
    # FIXME
    # measurement_per_pkt = 50

    event measurement.arrived():
        rec = number_packets.last()
        # FIXME
        #rec.number_of_packets += measurement_per_pkt
        rec.number_of_packets += 50
        number_packets.save(rec)


local model DeviceLocationModel():
    properties:
        durable = False
        reliable = False
        records = 1

    schema:
        #device = ModelField( from_model= "AppDevice" )
        location_lat : int32
        location_long : int32
        street : str
        house : str
        zip : str
        location : str
        notes : str


controller AppSystem(device_bootstrap : AppDevice,
                     embedded_config : AppConfig,
                     gtw_config : GatewayAppConfig,
                     measurement_pkt : MeasurementPacket,
                     measurement : Measurement,
                     location_model : DeviceLocationModel,
                     ocb : OCBEncryption):
    event device_bootstrap.arrived():
        if not self.error:
            rec = self.record
            if rec.first_boot:
                # FIXME
                #rec.uuid = api.get_unique_uuid()
                device_bootstrap.save(rec)
                loc = location_model.create()
                location_model.save(loc)
                # FIXME
                #sink.write(loc)
            # FIXME
            #sink.write(rec)

    event embedded_config.arrived():
        if not self.error:
            rec = self.record
            # FIXME
            #sink.write(rec)

    event measurement_pkt.arrived():
        if not self.error:
            rec = self.record
            measurements = ocb.decrypt(rec.measurement)
            # FIXME this won't parse well
            for m in measurements:
                # FIXME
                #sink.write(m)

    event location_model.arrived():
        if not self.error:
            rec = self.record
            # FIXME
            #sink.write(rec)


space EmbeddedSpace:
    platform:
        language = CLang
        # FIXME
        #system = nrf52Platform.v12
        system = Contiki.v1

    models:
	    app_device = AppDevice()
	    embedded_config = AppConfig()
	    boot_error = BootError(size=30)
	    adc_model = ADCModel()
	    location = DeviceLocationModel()
	    measurement = Measurement()
	    measurement_packet = MeasurementPacket(size=500)
	    encrypted_blob = EncryptedBlob(size=10) # FIXME size?

    interfaces:
        timer = TimerSource()
        temperature = TemperatureSource()
        voltage = VoltageSource()
        fft = FFT()
        ocb = OCBEncryption()

    controllers:
        boot_ctr = EmBootstrapController(timer=interfaces.timer, boot_error=models.boot_error, app_device=models.app_device)
        measurement_ctr = MeasurementController(measurement_model=models.measurement,
                                                measurement_pkt=models.measurement_packet,
                                                eBlob=models.encrypted_blob,
                                                adc_model=models.adc_model,
                                                timer=interfaces.timer,
                                                temp=interfaces.temperature,
                                                fft=interfaces.fft,
                                                voltage=interfaces.voltage,
                                                ocb=interfaces.ocb)


space GatewaySpace:
    platform:
        language = JLang
        system = Android.v19

    models:
        app_gtw_config = GatewayAppConfig(buffer_size=10) # FIXME buffer_size?
        number_packets = NumberOfPackets()
        boot_error = BootError(size=100)
        measurement_packet = MeasurementPacket(size=500)

    controllers:
        packet_counter = PacketCounter(number_packets=models.number_packets, measurement=models.measurement_packet)


space CloudSpace:
    platform:
	    language = JLang
	    system = J2SE.v18

    models:
	    device = AppDevice()
	    adc_model = ADCModel()
	    boot_error = BootError(size=10) # FIXME size?
	    embedded_config = AppConfig()
	    gtw_config = GatewayAppConfig(buffer_size=10) # FIXME size?
	    measurement = Measurement()
	    measurement_packet = MeasurementPacket(size=10) # FIXME size?
	    location_model = DeviceLocationModel()
	    encrypted_blob = EncryptedBlob(size=10) # FIXME size?

    interfaces:
        timer = TimerSource()
        ocb = OCBEncryption()

    controllers:
	    bootstrap_ctr = AppSystem(measurement_pkt=models.measurement_packet,
	                              location_model=models.location_model,
	                              device_bootstrap=models.device,
	                              gtw_config=models.gtw_config,
	                              embedded_config=models.embedded_config,
	                              measurement=models.measurement,
	                              ocb=interfaces.ocb)
