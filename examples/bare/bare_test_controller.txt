replicated model Random(size):
    properties:
        durable = False
        reliable = False
        records = size

    schema:
        # comment here
        value : int32

interface TimerSource():
    implementation:
        java = "rlib/java/timer.stg"
        c = "rlib/c/timer.stg"

    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)

    event fired()

interface RandomSource():
    implementation:
        java = "rlib/java/random.stg"
        c = "rlib/c/random.stg"

    def next(): int32


controller RandomControllerEmbedded(random: Random, timer: TimerSource, rnd : RandomSource):
    event random.departed():
        x = 7

    event timer.fired():
        #self
        rec = random.create()
        rec.value = rnd.next()
        random.save(rec)

    event system.started():
        timer.start_periodic(5000)

controller CController(random: Random):
    event random.arrived():
        rec = self.record
        # do something with rec.value


space GatewaySpace:
    platform:
        language = JLang
        system = J2SE.v18

    models:
        random = Random(size=100)

    interfaces:
        timer_1 = TimerSource()
        rng_1 = RandomSource()

    controllers:
        rndcnt_1 = RandomControllerEmbedded(random = models.random, timer = interfaces.timer_1, rnd = interfaces.rng_1)


space EmbeddedSpace:
    platform:
        #language = CLang
        #system = Posix.v2008
        language = JLang
        system = J2SE.v18

    models:
        random = Random(size=100)

    controllers:
        rndcnt_1 = CController(random = models.random)