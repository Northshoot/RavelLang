replicated model Random(size : int32):
    properties:
        durable = False
        reliable = False
        records = size
        flow = EmbeddedSpace, GatewaySpace

    schema:
        # comment here
        value : int32
        array_value : byte[]
        str_value : str
        str2_value : str
        err_value : error_msg

interface TimerSource():
    implementation:
        java = "rlib/java/timer.stg"
        c = "rlib/c/timer.stg"

    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)

    event fired()

interface RandomSource():
    implementation:
        java = "rlib/java/random.stg"
        c = "rlib/c/random.stg"

    def next(): int32


#view RandomCounter(timer: TimerSource):
#    counter: int32
#    time: timestamp

#    def update(rec: Random.Record):
#        time = timer.getNow()
#        counter += 1
#        value = rec.value


local model Counter():
    properties:
        records = 1
    schema:
        v : int32

controller RandomControllerEmbedded(random: Random, cnt : Counter, timer: TimerSource, timer2: TimerSource, rnd : RandomSource):
    event timer.fired():
        rec = random.create()

        cntrec = cnt.get(0)
        #rec.value = rnd.next()
        rec.value = cntrec.v
        cntrec.v += 1
        cnt.save(cntrec)

        rec.str_value = "lol"
        rec.str2_value = "lol2"
        ctx = random.save(rec)

        if ctx.error:
            timer.cancel()

        z = 7
        y : bool
        if z > 0:
            y = True
        else:
            y = False
        if False:
            system.print("yes")
        if rec.value > 0:
            z = y
        else:
            z = y
        if z > 0:
            system.print("lol")
        #view.update(rec)

        rec2 = random.create()
        rec2.value = rec.value

        for r in random:
            system.print("one record")

    event timer2.fired():
        system.print("timer2")

    event system.started():
        rec = cnt.create()
        rec.v = 0
        cnt.save(rec)
        timer.start_periodic(5000)

local model Sum():
    properties:
        records = 1
        reliable = False
        durable = False
    schema:
        value : int32

controller CController(random: Random, sum : Sum):
    event random.arrived():
        rec = self.record
        x  = 7
        s : str
        if rec.err_value:
            s = rec.str_value
        else:
            s = rec.str2_value
        system.print(s)

        sum_record : Sum.Record
        if sum.size() == 0:
            sum_record = sum.create()
            sum_record.value = rec.value
        else:
            sum_record = sum.get(0)
            sum_record.value = rec.value + sum_record.value
        sum.save(sum_record)

        # FIXME this does not work because it cannot optimize
        #if sum_record.value > 5 and False:
        if sum_record.value > 5:
            if False:
                system.print("big")


#interface Database<T>(model: T):
#    implementation:
#        python = "rlib/py/django.stg"

#    def save(r : T.Record): Random.Context

#controller CloudController(random: Random, db1: Database<Random>, db2: Database<Random2>):
#    event random.arrived():
#        rec = self.record
#        if rec.value >= 0:
#            db.save(rec)
#        if rec.origin == GatewaySpace:
#            #

space CloudSpace:
    platform:
        language = python.v36
        system = Django.v10

    models:
        random = Random(size=1)

    interfaces:
        #database =

    controllers:
        #rndcnt_1 = RandomControllerEmbedded(random = models.random, timer = interfaces.timer_1, rnd = interfaces.rng_1)


space GatewaySpace:
    platform:
        language = JLang
        system = J2SE.v18
        #language = CLang
        #system = Posix.v2008

    models:
        random = Random(size=5)
        cnt = Counter()

    interfaces:
        timer_1 = TimerSource()
        timer_2 = TimerSource()
        rng_1 = RandomSource()

    controllers:
        rndcnt_1 = RandomControllerEmbedded(random = models.random, cnt = models.cnt, timer = interfaces.timer_1, timer2 = interfaces.timer_2, rnd = interfaces.rng_1)
        # swap the timers now
        #rndcnt_2 = RandomControllerEmbedded(random = models.random, timer = interfaces.timer_2, timer2 = interfaces.timer_1, rnd = interfaces.rng_1)


space EmbeddedSpace:
    platform:
        language = CLang
        system = Posix.v2008
        #language = JLang
        #system = J2SE.v18

    models:
        random = Random(size=5)
        sum = Sum()

    controllers:
        ccntrl = CController(random = models.random, sum = models.sum)