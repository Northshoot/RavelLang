replicated model Random(size : int32):
    properties:
        durable = False
        reliable = False
        records = size

    schema:
        # comment here
        value : int32
        array_value : byte[]
        str_value : str
        err_value : error_msg

interface TimerSource():
    implementation:
        java = "rlib/java/timer.stg"
        c = "rlib/c/timer.stg"

    def start_one_shot(time : int32)
    def cancel()
    def start_periodic(time: int32)

    event fired()

interface RandomSource():
    implementation:
        java = "rlib/java/random.stg"
        c = "rlib/c/random.stg"

    def next(): int32


#view RandomCounter(timer: TimerSource):
#    counter: int32
#    time: timestamp

#    def update(rec: Random.Record):
#        time = timer.getNow()
#        counter += 1
#        value = rec.value


controller RandomControllerEmbedded(random: Random, timer: TimerSource, rnd : RandomSource):
    #foo

    event random.departed():
        x = 7

    event timer.fired():
        #self
        rec = random.create()
        rec.value = rnd.next()
        ctx = random.save(rec)

        if ctx.error:
            timer.cancel()
        #view.update(rec)

    event system.started():
        timer.start_periodic(5000)

    event system.stopped():
        x = 4

controller CController(random: Random):
    event random.arrived():
        rec = self.record
        # do something with rec.value


#interface Database<T>(model: T):
#    implementation:
#        python = "rlib/py/django.stg"

#    def save(r : T.Record): Random.Context

#controller CloudController(random: Random, db1: Database<Random>, db2: Database<Random2>):
#    event random.arrived():
#        rec = self.record
#        if rec.value >= 0:
#            db.save(rec)
#        if rec.origin == GatewaySpace:
#            #

space CloudSpace:
    platform:
        language = python.v36
        system = Django.v10

    models:
        random = Random(size=1)

    interfaces:
        #database =

    controllers:
        #rndcnt_1 = RandomControllerEmbedded(random = models.random, timer = interfaces.timer_1, rnd = interfaces.rng_1)


interface CloudEndpoint(p : int32):
    configuration:
        base = '171.64.70.90'
        port = p
        type = 'HTTP'
        method = 'POST'
        url = '<app.name>/'
        user_agent = 'Ravel:Java/Client'

    implementation:
        java = "rlib/java/httpEndpoint.stg"
        c = "rlib/c/httpEndpoint.stg"


space GatewaySpace:
    platform:
        language = JLang
        system = J2SE.v18

    models:
        random = Random(size=5)

    interfaces:
        timer_1 = TimerSource()
        rng_1 = RandomSource()
        cp = CloudEndpoint(p = 1000)

    controllers:
        rndcnt_1 = RandomControllerEmbedded(random = models.random, timer = interfaces.timer_1, rnd = interfaces.rng_1)



space EmbeddedSpace:
    platform:
        #language = CLang
        #system = Posix.v2008
        language = JLang
        system = J2SE.v18

    models:
        random = Random(size=5)

    controllers:
        rndcnt_1 = CController(random = models.random)