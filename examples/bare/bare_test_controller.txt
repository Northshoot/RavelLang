streaming model Random(size):
    properties:
        durable = False
        reliable = False
        #records = size
        records = 10

    schema:
        # comment here
        value = IntegerField()

interface TimerSource():
    implementation:
        java = "java/timer.stg"
        c = "c/timer_c.stg", "c/timer_h.stg"

    def start_one_shot( time : int32 )
    def cancel()
    def start_periodic( time: int32)

    event fired()

controller RandomControllerEmbedded(random: Random, timer: TimerSource):
    event random.arrived():
        s1 = "foo"
        s2 = s1 + 1

        arrivedRec = self.record

        rec = random.create()
        rec.value = 7 + "Str"
        random.save(rec)
    event random.departed():
        x = 7

    event timer.fired():
        #self
        rec = random.create()
        random.save(rec)

space EmbeddedSpace:
    platform:
        language = JLang
        templates = nrf52
        system = Android.v22

    models:
        random = Random(size=10)
        #frequency = Frequency(size=1)
        #boor_error = BootError()

    sources:
        #random = platform.system.random
        timer_1 = TimerSource()

    controllers:
        rndcnt_1 = RandomControllerEmbedded(random = models.random, timer = sources.timer_1)
        rndcnt_2 = RandomControllerEmbedded(random = models.random, timer = sources.timer_2)

space Gateway:
    platform:
        language = JLang
        templates = nrf52
        system = Android.v22

    models:
        random = Random(size=10)
        #frequency = Frequency(size=1)
        #boor_error = BootError()

    sources:
        #random = platform.system.random
        timer_1 = platform.system.timer()
        timer_2 = platform.system.timer()

    controllers:
        rndcnt_2 = RandomControllerEmbedded(random = models.random, timer = sources.timer_2)