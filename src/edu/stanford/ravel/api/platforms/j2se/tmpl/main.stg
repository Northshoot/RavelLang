file(package) ::=<<
package <package>;

import org.stanford.ravel.rrt.tiers.JavaDriver;
import org.stanford.ravel.rrt.tiers.Endpoint;
import org.stanford.ravel.rrt.tiers.Error;
import org.stanford.ravel.rrt.utils.EndpointListReader;
import org.stanford.ravel.rrt.KeyProvider;
import org.stanford.ravel.rrt.utils.FileSystemKeyProvider;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;

import <package>.AppDispatcher;

class Application {
    public static void main(String[] args) {
        if (args.length \< 1) {
            System.err.println("Expected endpoint configuration file as first argument.");
            return;
        }

        FileSystemKeyProvider keyProvider = new FileSystemKeyProvider();
        if (args.length >= 3) {
            try (FileInputStream keyFile = new FileInputStream(args[1])) {
                keyProvider.load(keyFile);
            } catch (IOException e) {
                System.err.println("Failed to load key provider file: " + e.getMessage());
            }
        }
         int  endpoint_id = -1;
         try {
                endpoint_id = Integer.parseInt(args[0]);
            } catch (NumberFormatException e) {
                System.err.println("Argument" + args[0] + " must be an integer: device ID");
                System.exit(1);
            }

        AppDispatcher dispatcher = new AppDispatcher(keyProvider, endpoint_id);
        JavaDriver driver = new JavaDriver(dispatcher);
        dispatcher.setDriver(driver);

        String configFileName = args[1];
        try (EndpointListReader reader = new EndpointListReader(new FileInputStream(configFileName))) {
            Endpoint ep = reader.next();
            while (ep != null) {
                Error err = driver.registerEndpoint(ep);
                //TODO: fix this properly
                if (err != Error.SUCCESS) {
                    System.err.println("Waiting for connection... AppId " + ep.getId() + " dId "+ dispatcher.getDeviceId() + ": " + err);
                    // die immediately if endpoint registration failed (it means we could not
                    // bind the right ports)
                    //return;
                }
                ep = reader.next();
            }
        } catch (IOException e) {
            System.err.println("Failed to load endpoint configuration file: " + e.getMessage());
        }

        dispatcher.addAllEndpoints();
        driver.loadDurableStorage();
        driver.appDispatcherReady();
    }
}
>>