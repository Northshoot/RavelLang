file(package, name) ::=<<
package <package>;

import java.util.Collections;
import java.util.Map;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.os.Binder;
import android.util.Log;
import java.util.ArrayList;
import java.io.IOException;
import java.io.InputStream;

import org.stanford.ravel.rrt.android.AndroidDriver;
import org.stanford.ravel.rrt.tiers.Endpoint;
import org.stanford.ravel.rrt.utils.FileSystemKeyProvider;

import <package>.AppDispatcher;

public class <name> extends Service {
    public static final String LOG_TAG = <name>.class.getSimpleName();

    private AppDispatcher dispatcher;
    private AndroidDriver driver;
    private IBinder mBinder = new <name>Binder();



    public <name>() {}

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        if (dispatcher != null)
            return START_STICKY;

        Log.i(LOG_TAG, "Starting service");
        try {
            startThread();

            Log.i(LOG_TAG, "Started service");
            return START_STICKY;
        } catch(Exception e) {
            Log.e(LOG_TAG, "Exception while creating the app dispatcher", e);
            throw new RuntimeException(e);
        }
    }

    private void startThread() {
        FileSystemKeyProvider keyProvider = new FileSystemKeyProvider();
        dispatcher = new AppDispatcher(keyProvider);
        driver = new AndroidDriver(dispatcher, this);
        dispatcher.setDriver(driver);

        dispatcher.addAllEndpoints();
        driver.loadDurableStorage();
        driver.appDispatcherReady();
    }

    @Override
    public void onDestroy() {
        Log.i(LOG_TAG, "Destroying service");
        if (dispatcher != null) {
            dispatcher.stop();
            dispatcher = null;
        }
        Log.i(LOG_TAG, "Destroyed service");
    }

    public void setEndpoints(ArrayList\<Endpoint> endp){
        driver.setEndpoints(endp);
    }

    public void setKey(InputStream key){
        ((FileSystemKeyProvider)dispatcher.getKeyProvider()).load(key);
    }

    @Override
     public IBinder onBind(Intent intent) {
     Log.v(LOG_TAG, "in onBind");
     return mBinder;
     }

     @Override
     public void onRebind(Intent intent) {
        Log.v(LOG_TAG, "in onRebind");
        super.onRebind(intent);
     }

     @Override
     public boolean onUnbind(Intent intent) {
        Log.v(LOG_TAG, "in onUnbind");
        return true;
     }

    public class <name>Binder extends Binder {
        public <name>  getService() {
            return <name>.this;
        }
    }
}
>>