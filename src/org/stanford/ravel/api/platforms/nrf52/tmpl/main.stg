file(name) ::=<<
/*
 * You, just keep on being awesome!
 * main.c
 *
 *  Autogenerated by Ravel system
 */

#include "nrf52.h"

#include \<ravel/nrf52-driver.h>
#include \<AppDispatcher.h>

/*---------------------------------------------------------------------------*/


AppDispatcher dispatcher;
RavelNrf52Driver driver;

/*---------------------------------------------------------------------------*/

static void power_manage(void) {
    /* execute any scheduled operations */
    ravel_nrf52_driver_dispatch_event(&driver, ev);
    app_sched_execute();

    /* Wait for an interrupt/event */
    uint32_t err_code = sd_app_evt_wait();
    APP_ERROR_CHECK(err_code);
}


int main(void) {
    #ifdef DEBUG
        LOG("Device starting...");
    #endif

    /* setup the scheduler */
//    APP_SCHED_INIT(0, 5);
//
//    /* start the softdevice */
//    ble_stack_init();
//
//    /* start the persistent memory queue */
//    flash_init();
//
//    /* start ble */
//    ble_start();
//
//    /* check to see if we're properly configured */
//    if (config_get_state() == CONFIG_STATE_VALID) {
//        LOG("Sensor configured: Name %s Time offset %lu Threshold %lu ",
//            config_get_name(),
//            config_get_global_time_offset(),
//            config_get_sensor_threshold()
//        );
//
//    } else {
//        LOG("Sensor not configured");
//    }
//
//    /* start the sensor */
//    sensor_init();
//    sensor_start();

  ravel_generated_app_dispatcher_init(&dispatcher);
  ravel_nrf52_driver_init(&driver, &dispatcher);
  ravel_generated_app_dispatcher_set_driver(&dispatcher, &driver.base);
  ravel_contiki_driver_app_dispatcher_ready(&driver);


  ravel_contiki_driver_finalize(&driver);
  ravel_generated_app_dispatcher_finalize(&dispatcher);
    for (;;) {
        // this is where the main execution happens
        power_manage();
    }
}

/*---------------------------------------------------------------------------*/
>>