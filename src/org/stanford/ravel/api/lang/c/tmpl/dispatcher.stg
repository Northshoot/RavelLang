import "common.stg"

append_params(comp) ::=<<
<if(comp.allParameters)>, <comp.allParameters:{p|<p; format="literal">}; separator=", "><endif>
>>

init_model(comp) ::=<<
ravel_generated_<comp.component.name; format="function">_init(&self->model_<comp.varName>, self<append_params(comp)>);
>>
init_interface(comp) ::=<<
ravel_generated_<comp.component.name; format="function">_init(&self->iface_<comp.varName>, <comp.instanceId><append_params(comp)>);
>>
finalize_component(comp, prefix) ::=<<
ravel_generated_<comp.component.name; format="function">_finalize(&self-><prefix>_<comp.varName>);
>>

init_controller(c) ::=<<
ravel_generated_<c.name; format="function">_init(&self->ctr_<c.varName><if(c.parameterValues)>, <c.parameterValues; separator=", "><endif>);
>>
finalize_controller(c) ::=<<
ravel_generated_<c.name; format="function">_finalize(&self->ctr_<c.varName>);
>>

set_component_controller(comp, prefix) ::=<<
<comp.controllerList:{c|ravel_generated_<comp.component.name; format="function">_set_controller_<c.varName>(&self-><prefix>_<comp.varName>, &self->ctr_<c.varName>);}; separator="\n">
>>

model_case_event(model, event, args) ::=<<
case <model.component.baseModel.id>:
    ravel_<model.component.baseModel.modelType; format="function">_model_<event>(&self->model_<model.varName>.__base, <args>);
    break;
>>

c_file(includes,name,models,interfaces,controllers,space) ::=<<
<begin_source(name)>

<includes:do_include(); separator="\n">

static void
data_received(<name> *self, RavelPacket *packet, RavelEndpoint *endpoint)
{
    switch (packet->model_id) {
        <models:model_case_event("record_arrived", "packet, endpoint"); separator="\n">
    }
}

static void
saved_durably(<name> *self, RavelPacket *packet, RavelError error)
{
    switch (packet->model_id) {
        <models:model_case_event("record_saved_durably", "packet, error"); separator="\n">
    }
}

static void
send_done(<name> *self, RavelError error, RavelPacket *packet, RavelEndpoint *endpoint)
{
    if (error == RAVEL_ERROR_SUCCESS) {
        switch (packet->model_id) {
            <models:model_case_event("record_departed", "packet, endpoint"); separator="\n">
        }
    } else {
        switch (packet->model_id) {
            <models:model_case_event("record_failed_to_send", "packet, endpoint, error"); separator="\n">
        }
    }
}

static const RavelDispatcherVTable vtable = {
    .data_received = (void(*)(void*, RavelPacket *, RavelEndpoint *)) data_received,
    .send_done = (void(*)(void*, RavelError, RavelPacket *, RavelEndpoint *)) send_done,
    .saved_durably = (void(*)(void*, RavelPacket *, RavelError)) saved_durably,
};

void
ravel_generated_<name; format="function">_init(<name> *self)
{
    ravel_base_dispatcher_init(&self->base);
    self->base.vtable = &vtable;

    <models:init_model(); separator="\n">
    <interfaces:init_interface(); separator="\n">
    <controllers:init_controller(); separator="\n">

    <models:set_component_controller("model"); separator="\n">
    <interfaces:set_component_controller("iface"); separator="\n">
}
void
ravel_generated_<name; format="function">_finalize(<name> *self)
{
    <models:finalize_component("model"); separator="\n">
    <interfaces:finalize_component("iface"); separator="\n">
    <controllers:finalize_controller(); separator="\n">

    ravel_base_dispatcher_finalize(&self->base);
}

void
ravel_generated_<name; format="function">_set_driver(<name> *self, RavelDriver *driver)
{
    ravel_base_dispatcher_set_driver(&self->base, driver);
}

void
ravel_generated_<name; format="function">_add_all_endpoints(<name> *self)
{
    <models:{m|ravel_generated_<m.component.name; format="function">_add_all_endpoints(&self->model_<m.varName>);}; separator="\n">
}

void
ravel_generated_<name; format="function">_started(<name> *self)
{
    <dispatch_event_single_instance_ptr(space.systemAPI.component, "started", [])>
}
void
ravel_generated_<name; format="function">_stopped(<name> *self)
{
    <dispatch_event_single_instance_ptr(space.systemAPI.component, "stopped", [])>
}
void
ravel_generated_<name; format="function">_restarted(<name> *self)
{
    <dispatch_event_single_instance_ptr(space.systemAPI.component, "restarted", [])>
}

>>

h_file(includes,name,models,interfaces,controllers,space) ::=<<
<begin_header("", name)>

#include \<api/endpoint.h>
#include \<api/system.h>
#include \<api/driver.h>
#include \<api/base_dispatcher.h>

<includes:do_include(); separator="\n">

<begin_extern_c()>

typedef struct <name> {
    RavelBaseDispatcher base;

    <models:{c|<c.component.name> model_<c.varName>;}; separator="\n">
    <interfaces:{c|<c.component.name> iface_<c.varName>;}; separator="\n">
    <controllers:{c|<c.name> ctr_<c.varName>;}; separator="\n">
} <name>;

void ravel_generated_<name; format="function">_init(<name> *self);
void ravel_generated_<name; format="function">_finalize(<name> *self);

void ravel_generated_<name; format="function">_set_driver(<name> *self, RavelDriver *driver);
void ravel_generated_<name; format="function">_add_all_endpoints(<name> *self);

void ravel_generated_<name; format="function">_started(<name> *self);
void ravel_generated_<name; format="function">_stopped(<name> *self);
void ravel_generated_<name; format="function">_restarted(<name> *self);

<end_extern_c()>
<end_header("", name)>
>>