import "common.stg"

define_dispatch_func(model, event, controllers) ::=<<
static void dispatch_<event>(<model.name> *self, Context *ctx)
{
    <dispatch_event_single_instance(model, event, ["ctx"])>
}
>>

c_file(includes,name,base,model) ::=<<
<begin_source(name)>

#include "api/context.h"
#include "api/packet.h"
#include "api/endpoint.h"
#include "api/base_model.h"
<includes:do_include(); separator="\n">

#define MODEL_ID   <model.baseModel.id>

#define ravel_base_model(m) (&(m)->__base.base)

void
ravel_generated_<model.name; format="function">_record_init(<model.name>_Record *this)
{
    /* TODO Clear the record */
}

void
ravel_generated_<model.name; format="function">_record_init_from_network(<model.name>_Record *this, uint8_t *data)
{
    <model.receiveCode>
}

uint8_t *
ravel_generated_<model.name; format="function">_record_get_bytes(<model.name>_Record *this)
{
    <model.sendCode>
}

void
ravel_generated_<model.name; format="function">_record_finalize(<model.name>_Record *this)
{
    /* Free any record resources (eg strings) */
}

<define_dispatch_func(model, "full", model.controllerMap.full)>
<define_dispatch_func(model, "arrived", model.controllerMap.arrived)>
<define_dispatch_func(model, "departed", model.controllerMap.departed)>
<define_dispatch_func(model, "save_done", model.controllerMap.save_done)>

static const RavelModelVTable vtable = {
    .dispatch_full = (void(*)(void*, Context*)) dispatch_full,
    .dispatch_arrived = (void(*)(void*, Context*)) dispatch_arrived,
    .dispatch_departed = (void(*)(void*, Context*)) dispatch_departed,
    .dispatch_save_done = (void(*)(void*, Context*)) dispatch_save_done
};

void
ravel_generated_<model.name; format="function">_init(<model.name> *self<append_parameter_list(model.baseModel.parameters)>)
{
    <base; format="function">_init(&self->__base, <model.baseModel.size>, sizeof(<model.name>_Record));
    ravel_base_model(self)->vtable = &vtable;
}

void
ravel_generated_<model.name; format="function">_finalize(<model.name> *self)
{
    <base; format="function">_finalize(&self->__base);
}

<model.controllerList:define_set_controller_method(model.name); separator="\n">

<model.name>_Record *
ravel_generated_<model.name; format="function">_create(<model.name> *self)
{
    return ravel_base_model_create(ravel_base_model(self));
}
Context *
ravel_generated_<model.name; format="function">_save(<model.name> *self, <model.name>_Record *record)
{
    return <base; format="function">_save(&self->__base, record);
}

>>

declare_record_class(model_name, model_fields) ::=<<
typedef struct {
    <model_fields:{f|<f.type> <f.name>;}; separator="\n">
} <model_name>_Record;

void ravel_generated_<model_name; format="function">_record_init(<model_name>_Record *record);
void ravel_generated_<model_name; format="function">_record_finalize(<model_name>_Record *record);
void ravel_generated_<model.name; format="function">_record_init_from_network(<model.name>_Record *this, uint8_t *data);
uint8_t *ravel_generated_<model.name; format="function">_record_get_bytes(<model.name>_Record *this);
>>

h_file(includes,name,base,model) ::=<<
<begin_header("MODEL", name)>

#include "api/context.h"
#include "api/packet.h"
#include "api/endpoint.h"
#include "api/base_model.h"

/* Forward declare our model class before we include the controller headers */
typedef struct s_<name> <name>;

<includes:do_include(); separator="\n">

<begin_extern_c()>

<declare_record_class(model.name, model.baseModel.fields)>

struct s_<name> {
    <base> __base;

    <model.controllerList:{c|<c.name> *ctr_<c.varName>;}; separator="\n">
};

void ravel_generated_<model.name; format="function">_init(<model.name> *self<append_parameter_list(model.baseModel.parameters)>);
void ravel_generated_<model.name; format="function">_finalize(<model.name> *self);

/* The Top API, used by the Controller */
<model.name>_Record *ravel_generated_<model.name; format="function">_create(<model.name> *self);
Context *ravel_generated_<model.name; format="function">_save(<model.name> *self, <model.name>_Record *record);

/* The Init API, used by the Dispatcher */
<model.controllerList:declare_set_controller_method(model.name); separator="\n">

/* The Bottom API, also used by the Dispatcher */
void ravel_generated_<model.name; format="function">_record_arrived(<model.name> *self, RavelPacket *record, RavelEndpoint endpoint);
void ravel_generated_<model.name; format="function">_record_departed(<model.name> *self, RavelPacket *record, RavelEndpoint endpoint);
void ravel_generated_<model.name; format="function">_record_saved_durably(<model.name> *self, RavelPacket *record);
void ravel_generated_<model.name; format="function">_record_saved_endpoint(<model.name> *self, RavelPacket *record, RavelEndpoint endpoint);
void ravel_generated_<model.name; format="function">_endpoint_connected(<model.name> *self, RavelEndpoint *endpoint);

<end_extern_c()>
<end_header("MODEL", name)>
>>