import "common.stg"

define_dispatch_func(model, event, controllers) ::=<<
static void dispatch_<event>(<model.name> *self, Context *ctx)
{
    <dispatch_event_single_instance(model, event, ["ctx"])>

    ravel_base_model_reset_alloc(ravel_base_model(self));
}
>>

c_file(includes,name,base,model) ::=<<
<begin_source(name)>

#include \<api/context.h>
#include \<api/packet.h>
#include \<api/endpoint.h>
#include \<api/base_model.h>
#include \<api/intrinsics.h>
#include \<api/growable_byte_array.h>
#include \<api/system.h>

<includes:do_include(); separator="\n">

#define MODEL_ID   <model.baseModel.id>

void
ravel_generated_<model.name; format="function">_record_init(<model.name>_Record *this)
{
    memset(this, 0, sizeof(<model.name>_Record));
}

static void
ravel_generated_<model.name; format="function">_record_init_from_network(<model.name>_Record *this, uint8_t *data, bool is_encrypted)
{
    <model.baseModel.receiveCode>
}

static uint8_t *
ravel_generated_<model.name; format="function">_record_get_bytes(<model.name>_Record *this)
{
    <model.baseModel.sendCode>
}

void
ravel_generated_<model.name; format="function">_record_finalize(<model.name>_Record *this)
{
    /* Free any record resources (eg strings) */
}

<define_dispatch_func(model, "full", model.controllerMap.full)>
<define_dispatch_func(model, "arrived", model.controllerMap.arrived)>
<define_dispatch_func(model, "departed", model.controllerMap.departed)>
<define_dispatch_func(model, "save_done", model.controllerMap.save_done)>

static <model.name>_Record *
ravel_generated_<model.name; format="function">_real_unmarshall(<model.name> *this, <model.name>_Record * record, uint8_t* data, size_t length, RavelEndpoint *endpoint)
{
    uint8_t *decrypted;
    record->__base.record_id = ravel_intrinsic_extract_byte(data, 1);
    bool is_encrypted;

    {
        <model.decryptCode>
        ravel_generated_<model.name; format="function">_record_init_from_network(record, decrypted, is_encrypted);
        ravel_array_free(decrypted);
    }

    return record;
}

static uint8_t *
ravel_generated_<model.name; format="function">_real_marshall(<model.name> *this, <model.name>_Record *record, RavelEndpoint *endpoint)
{
    uint8_t *data;

    data = ravel_generated_<model.name; format="function">_record_get_bytes(record);

    if (endpoint != NULL) {
        <model.encryptCode>
        ravel_array_free(data);
        return __returnValue;
    } else {
        return data;
    }
}

static void
record_finalize(<model.name> *this, <model.name>_Record *record)
{
    ravel_generated_<model.name; format="function">_record_finalize(record);
}

static const RavelModelVTable vtable = {
    .marshall = (uint8_t* (*)(void*, void*, RavelEndpoint*)) ravel_generated_<model.name; format="function">_real_marshall,
    .unmarshall = (void*(*)(void*, void*, uint8_t*, size_t, RavelEndpoint*)) ravel_generated_<model.name; format="function">_real_unmarshall,
    .record_finalize = (void(*)(void*, void*)) record_finalize,
    .dispatch_full = (void(*)(void*, Context*)) dispatch_full,
    .dispatch_arrived = (void(*)(void*, Context*)) dispatch_arrived,
    .dispatch_departed = (void(*)(void*, Context*)) dispatch_departed,
    .dispatch_save_done = (void(*)(void*, Context*)) dispatch_save_done
};

void
ravel_generated_<model.name; format="function">_init(<model.name> *self, struct AppDispatcher *dispatcher<append_parameter_list(model.baseModel.parameters)>)
{
    <base; format="function">_init(&self->__base, &dispatcher->base, <model.baseModel.size>, sizeof(<model.name>_Record), <model.baseModel.reliable>, <model.baseModel.durable>);
    ravel_base_model(self)->vtable = &vtable;
    self->dispatcher = &dispatcher->base.sys_api;
}

void
ravel_generated_<model.name; format="function">_finalize(<model.name> *self)
{
    <base; format="function">_finalize(&self->__base);
}

<model.controllerList:define_set_controller_method(model.name); separator="\n">

<model.name>_Record *
ravel_generated_<model.name; format="function">_create(<model.name> *self)
{
    <model.name>_Record *record = ravel_base_model_allocate(ravel_base_model(self));
    if (record == NULL) {
        ravel_system_print(self->dispatcher, "allocation failure in <model.name>");
        return NULL;
    }

    ravel_generated_<model.name; format="function">_record_init(record);

    return record;
}
Context *
ravel_generated_<model.name; format="function">_save(<model.name> *self, <model.name>_Record *record)
{
    return <base; format="function">_save(&self->__base, record);
}
void
ravel_generated_<model.name; format="function">_delete(<model.name> *self, <model.name>_Record *record)
{
    return <base; format="function">_delete(&self->__base, record);
}

void
ravel_generated_<model.name; format="function">_add_all_endpoints(<model.name> *self)
{
    static const char * sink_endpoints[] = { <model.streamingSinks:{s|"<s.name>"}; separator=","><if(model.streamingSinks)>, <endif>NULL };
    static const char * source_endpoints[] = { <model.streamingSources:{s|"<s.name>"}; separator=","><if(model.streamingSources)>, <endif>NULL };
    <base; format="function">_add_sink_endpoints(&self->__base, sink_endpoints);
    <base; format="function">_add_source_endpoints(&self->__base, source_endpoints);
}

>>

declare_record_class(model_name, model_fields) ::=<<
typedef struct {
    RavelRecord __base;

    <model_fields:{f|<f.type> <f.name>;}; separator="\n">
} <model_name>_Record;

void ravel_generated_<model_name; format="function">_record_init(<model_name>_Record *record);
void ravel_generated_<model_name; format="function">_record_finalize(<model_name>_Record *record);
>>

h_file(includes,name,base,model) ::=<<
<begin_header("MODEL", name)>

#include \<api/context.h>
#include \<api/packet.h>
#include \<api/endpoint.h>
#include \<api/base_model.h>
#include \<api/system.h>

/* Forward declare our model class before we include the controller headers */
typedef struct s_<name> <name>;
struct AppDispatcher;

<includes:do_include(); separator="\n">

<begin_extern_c()>

<declare_record_class(model.name, model.baseModel.fields)>

struct s_<name> {
    <base> __base;
    RavelSystemAPI *dispatcher;

    <model.controllerList:{c|<c.component.name> *ctr_<c.varName>;}; separator="\n">
};

void ravel_generated_<model.name; format="function">_init(<model.name> *self, struct AppDispatcher *dispatcher<append_parameter_list(model.baseModel.parameters)>);
void ravel_generated_<model.name; format="function">_finalize(<model.name> *self);

/* The Top API, used by the Controller */
<model.name>_Record *ravel_generated_<model.name; format="function">_create(<model.name> *self);
Context *ravel_generated_<model.name; format="function">_save(<model.name> *self, <model.name>_Record *record);
void ravel_generated_<model.name; format="function">_delete(<model.name> *self, <model.name>_Record *record);

static inline <model.name>_Record *ravel_generated_<model.name; format="function">_get(<model.name> *self, int idx)
{
    return ravel_base_model_get(ravel_base_model(self), idx);
}
static inline <model.name>_Record *ravel_generated_<model.name; format="function">_first(<model.name> *self)
{
    return ravel_base_model_first(ravel_base_model(self));
}
static inline <model.name>_Record *ravel_generated_<model.name; format="function">_last(<model.name> *self)
{
    return ravel_base_model_last(ravel_base_model(self));
}
static inline int ravel_generated_<model.name; format="function">_size(<model.name> *self)
{
    return ravel_base_model_size(ravel_base_model(self));
}
static inline RavelIterator ravel_generated_<model.name; format="function">_iterator(<model.name> *self)
{
    return ravel_base_model_iterator(ravel_base_model(self));
}
static inline bool ravel_generated_<model.name; format="function">_iterator_has_next(RavelIterator *iter)
{
    return ravel_base_model_iterator_has_next(iter);
}
static inline <model.name>_Record *ravel_generated_<model.name; format="function">_iterator_next(RavelIterator *iter)
{
    return ravel_base_model_iterator_next(iter);
}

/* The Init API, used by the Dispatcher */
<model.controllerList:declare_set_controller_method(model.name); separator="\n">

void ravel_generated_<model.name; format="function">_add_all_endpoints(<model.name> *self);

<end_extern_c()>
<end_header("MODEL", name)>
>>