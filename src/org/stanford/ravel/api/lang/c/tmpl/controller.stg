import "common.stg"

define_event_handler(handler, controller_name) ::=<<
void
<controller_name; format="function">_<handler.model; format="function">_<handler.name>(<controller_name>* this<! this is not a keyword in C, so we can use it !><append_parameter_list(handler.arguments)>)
{
    <handler.code>}
>>

c_file(includes,name,parameters,eventHandlers) ::=<<
<begin_source(name)>

#include \<api/context.h>
<includes:do_include(); separator="\n">

void
<name; format="function">_init(<name>* self<append_parameter_list(parameters)>)
{
    <parameters:{p|self-><p.name> = <p.name>;}; separator="\n">
}

void
<name; format="function">_finalize(<name>* self)
{
    /* Free any allocated resources here */
}

<eventHandlers:define_event_handler(name); separator="\n\n">
>>

declare_event_handler(handler, controller_name) ::=<<
void <controller_name; format="function">_<handler.model; format="function">_<handler.name>(<controller_name>* __this<append_parameter_list(handler.arguments)>);
>>

h_file(includes,name,parameters,eventHandlers) ::=<<
<begin_header(name)>

#include \<api/context.h>
<includes:do_include(); separator="\n">

<begin_extern_c()>

typedef struct {
    <parameters:{p|<p.type> <p.name>;}; separator="\n">
} <name>;

void <name; format="function">_init(<name>* self<append_parameter_list(parameters)>);
void <name; format="function">_finalize(<name>* self);

<eventHandlers:declare_event_handler(name); separator="\n">

<end_extern_c()>
<end_header(name)>
>>