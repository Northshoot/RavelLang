import "common.stg"

component_field(comp, prefix) ::=<<
private final <comp.name> <prefix>_<comp.varName> = new <comp.name>(this);
>>

controller_field(ctr) ::=<<
private final <ctr.name> ctr_<ctr.varName> = new <ctr.name>(<ctr.parameterValues; separator=", ">);
>>

endpoint_field(ep) ::=<<
private final Endpoint ep_<ep.name> = null;
>>
sink_field(sink) ::=<<
private final SinkAPI sink_<sink.varName> = null;
>>

model_case_record_arrived(model) ::=<<
case <model.baseModel.id>:
    model_<model.varName>.record_arrived(rp, endpoint);
    break;
>>

set_component_controller(comp, prefix) ::=<<
<comp.controllerList:{c|<prefix>_<comp.varName>.setController_<c.varName>(ctr_<c.varName>);}; separator="\n">
>>

file(package,imports,name,models,interfaces,controllers,endpoints) ::=<<
package <package>;

<imports:do_import()>

public class <name> implements DispatcherAPI, SystemEventAPI {
    <models:component_field("model"); separator="\n">
    <interfaces:component_field("iface"); separator="\n">
    <controllers:controller_field(); separator="\n">
    <endpoints:endpoint_field(); separator="\n">

    private DriverAPI driver;

    public AppDispatcher(DriverAPI driver) {
        this.driver = driver;

        <models:set_component_controller("model"); separator="\n">
        <interfaces:set_component_controller("iface"); separator="\n">

        driver.appDispatcherReady();
    }

    // Implementation of DispatcherAPI
    @Override
    public void data_received(byte[] data, Endpoint endpoint) {
        //is it an ACK?
        System.out.println("Received data from: " + endpoint.getName());

        RavelPacket rp = new RavelPacket();
        rp.fromNetwork(data);
        switch(rp.model_id) {
            <models:model_case_record_arrived()>
        }
    }

    @Override
    public Error send_data(RavelPacket data, Endpoint endpoint) {
        return driver.sendData(data.toBytes(), endpoint);
    }

    @Override
    public void driver_send_done(Error networkError, byte[] data, Endpoint endpoint) {
        // TODO
    }

    // Implementation of SystemEventAPI
    @Override
    public void started() {}

    @Override
    public void stopped() {}

    @Override
    public void restarted() {}

    @Override
    public void battery(SystemEventAPI.BatteryLevel bl) {}
};
>>