import "common.stg"

record_class(model, fields) ::=<<
public static class Record implements ModelRecord {
    private byte __idx = -1;

    <fields:{f|public <f.type> <f.name>;}; separator="\n">

    Record() {
    }

    void initFromNetwork(byte[] data, boolean is_encrypted) {
        this.__idx = org.stanford.ravel.rrt.lang.Intrinsic.extract_byte(data, 1);
        <model.baseModel.receiveCode>
    }

    byte[] toBytes() {
        <model.baseModel.sendCode>
    }

    @Override
    public void index(int i) {
        __idx =(byte) i;
    }

    @Override
    public int index() {
        return __idx;
    }
};
>>

file(package,imports,name,base,model,set_endpoints) ::=<<
package <package>;

import java.util.Arrays;

import org.stanford.ravel.rrt.model.<base>;
import org.stanford.ravel.rrt.model.ModelRecord;
import org.stanford.ravel.rrt.tiers.Endpoint;
import org.stanford.ravel.rrt.utils.ByteWork;
import org.stanford.ravel.rrt.utils.GrowableByteArray;
import org.stanford.ravel.rrt.Context;

<imports:do_import()>

public class <name> extends <base>\<<name>.Record> {
    <record_class(model, model.baseModel.fields)>

    public static final int MODEL_ID = <model.baseModel.id>;

    <model.controllerList:{c|private <c.component.name> ctr_<c.varName>;}; separator="\n">

    public <name>(AppDispatcher dispatcher<append_parameter_list(model.baseModel.parameters)>) {
        super(dispatcher, <model.baseModel.size; format="literal">, <model.baseModel.reliable>, <model.baseModel.durable>);
    }

    // Setter methods for AppDispatcher
    public void addAllEndpoints() {
        <if(model.streamingSinks)>addSinkEndpoints(Arrays.asList(<model.streamingSinks:{s|"<s.name>"}; separator="\n">));<endif>
        <if(model.streamingSources)>addSourceEndpoints(Arrays.asList(<model.streamingSources:{s|"<s.name>"}; separator="\n">));<endif>
    }
    <model.controllerList:set_controller_method(); separator="\n">

    // Event listener dispatch
    @Override
    protected void notifyFull(Context\<Record> ctx) {
        <dispatch_event_single_instance(model, "full", ["ctx"])>
    }
    @Override
    protected void notifyArrived(Context\<Record> ctx) {
        <dispatch_event_single_instance(model, "arrived", ["ctx"])>
    }
    @Override
    protected void notifyDeparted(Context\<Record> ctx) {
        <dispatch_event_single_instance(model, "departed", ["ctx"])>
    }
    @Override
    protected void notifySaveDone(Context\<Record> ctx) {
        <dispatch_event_single_instance(model, "save_done", ["ctx"])>
    }

    // Record creation and marshalling functions
    @Override
    protected Record unmarshall(Record record, byte[] data, Endpoint endpoint) {
        byte[] decrypted;
        int length = data.length;
        boolean is_encrypted;
        <model.decryptCode>
        record.initFromNetwork(decrypted, is_encrypted);
        return record;
    }
    @Override
    protected byte[] marshall(Record record, Endpoint endpoint) {
        byte[] data = record.toBytes();

        if (endpoint != null) {
            <model.encryptCode>
            return __returnValue;
        } else {
            return data;
        }
    }
    @Override
    public Record create() {
        return new Record();
    }

    // Adjust the type of all() to what the controllers expect
    public Record[] all() {
        return super.all(new Record[]{});
    }
};
>>
