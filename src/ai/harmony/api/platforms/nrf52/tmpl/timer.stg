timers_init(timers) ::= <<
/**
 * Initialization method for timers
 */
void <timers.innit_name>(void){
    // Initialize timer module.
    APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_OP_QUEUE_SIZE, false);
    <timers.timers:{timer|app_timer_create(&<timer.name>, <timer.timerMode>, <timer.callBack>);};separator="\n">
}
>>

start__timer_periodic__declaration(timer) ::=<<
/**
 * <timer.comment >
 */
void <timer.name>(uint32_t period); <\t><\t>
>>

start__timer_periodic__implementation(timer) ::= <<
/**
 * <timer.comment >
 */
void <timer.name>(uint32_t period){
	uint32_t time =  APP_TIMER_TICKS(period,  APP_TIMER_PRESCALER) ; <\t><\t> //pre-scale should a parameter
<if(timer.debug)>
    NRF_LOG_INFO("<timer.name> started\r\n");
<endif>
	app_timer_start(<timer.name>, time,  NULL);
}
>>

timer_start_once_implementation(timer) ::= <<
/**
 * <timer.comment >
 */
void <timer.name>__startTimerOnce(uint64_t next, app_timer_id_t  t){
<if(timer.debug)>
    NRF_LOG_INFO("<timer.name>__startTimerOnce started\r\n");
<endif>
    app_timer_start(t, next, NULL);
}
>>
stop__timer__declaration(timer) ::=<<
/**
 * Stop function for <timer.name>
 * <timer.comment >
 */
void <timer.name>(); <\t><\t> //<timer.comment>
 >>

stop__timer__implementation(timer) ::= <<
void <timer.name>(uint32_t period){
<if(timer.debug)>
    NRF_LOG_INFO("stopping <timer.name>\r\n");
<endif>
	app_timer_stop(<timer.name>); // <timer.comment>
}
>>
