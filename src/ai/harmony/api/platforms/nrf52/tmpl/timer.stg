timers_header(obj)::=<<
#ifndef API_TIMER_H_
#define API_TIMER_H_

#include \<stdint.h>
#include "app_error.h"
#include "softdevice_handler.h"
#include "app_timer.h"
#include "bsp_btn_ble.h"

#define APP_TIMER_PRESCALER              0                                          /**\< Value of the RTC1 PRESCALER register. */
#define APP_TIMER_OP_QUEUE_SIZE          4                                          /**\< Size of timer operation queues. */

<obj.timers:{timer|#define <timer.defineName>  APP_TIMER_TICKS(1000, APP_TIMER_PRESCALER)};separator="\n">

<obj.timers:{timer|<timer_def(timer)>};separator="\n">


void <obj.innit_name>(void);

<obj.timers:{timer|<get_timer_decl(timer)>};separator="\n">

//**end autogenerate *//
#endif /* API_TIMER_H_ */
>>

timer_object(timers, include)::=<<
/**
 * Initialization method for timers
 */
#include "nrf_log.h"
#include "nrf_log_ctrl.h"

#include "api_timer.h"

#include "ravel_layer.h"
#include "../<include>"


void <timers.innit_name>(void){
    // Initialize timer module.
    NRF_LOG_INFO("<timers.innit_name> running\r\n");
    APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_OP_QUEUE_SIZE, false);
    <timers.timers:{timer|app_timer_create(&<timer.cVarName>, <timer.timerMode>, <timer.callBack>);};separator="\n">
}

<timers.timers:{timer|<get_timer_impl(timer)>};separator="\n">

//**end autogenerate *//
>>
//get timer implementation
get_timer_impl(timer)::=<<
<if(timer.periodic)>
/**
 * <timer.comment >
 */
void <timer.startName>(uint32_t period){
    NRF_LOG_INFO("<timers.innit_name> started\r\n");
	uint32_t time =  APP_TIMER_TICKS(period,  APP_TIMER_PRESCALER) ; <\t><\t> //pre-scale should a parameter
<if(timer.debug)>
    NRF_LOG_INFO("<timer.name> started\r\n");
<endif>
	app_timer_start(<timer.cVarName>, time,  NULL);
}
void <timer.stopName>(uint32_t period){
    NRF_LOG_INFO("stopping <timer.name>\r\n");
	app_timer_stop(<timer.cVarName>); // <timer.comment>
}
<else>
/**
 * <timer.comment >
 */
void <timer.startName>(uint64_t next){
    NRF_LOG_INFO("<timer.namestartName> started\r\n");
    //static trix
    app_timer_start(<timer.cVarName>, next, NULL);
}
<endif>
>>

//timer declarations
get_timer_decl(timer)::=<<
<if(timer.periodic)>
//start timer
void <timer.startName>(uint32_t period);
//stop timer
void <timer.stopName>();
<else>
//not periodic can only be started for now
void <timer.startName>(uint32_t next);
<endif>
>>
timer_def(timer)::=<<
APP_TIMER_DEF(<timer.cVarName>);
>>
