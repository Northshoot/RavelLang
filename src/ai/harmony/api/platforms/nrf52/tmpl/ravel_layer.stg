/**
 * Ravels layers main file
 */
ravel_layer_obj_c(space)::=<<
/**
 * Autogenerated main file
 *
 *
 *  Created on: <space.timeDate>
 *      Author: Ravel
 */
 /*
  * RandomController.c
  *
  *  Created on: Sep 7, 2016
  *      Author: lauril
  */
 #include "app_timer.h"
 #include "nrf_log.h"
 #include "nrf_log_ctrl.h"
 #include "random_model_ctr.h"
 #include "api/api_rnd.h"
 #include "api/ravel_layer.h"
 #include "api/api_timer.h"
 #include "models.h"


 ConfigModel localCm;

 void random_model_ctr__set_config_model(ConfigModel *cm){
 	memset(&localCm, 0, sizeof(ConfigModel));
 	//localCm.time = cm->time;
 	localCm.frequency = cm->frequency;
 	////SEGGER_RTT_printf(0,"RD_CTRL_set_CM: %d frequency %d\r\n", cm->frequency, localCm.frequency);
 }
 void random_model_ctr__random_model_arrived(uint32_t i){
 	//do things when model data arrives
 	////SEGGER_RTT_WriteString(0,"RD_CTRL: model_arrived\r\n");

 }
 void random_model_ctr__config_model_arrived(RavelContext *rctx ){
 	////SEGGER_RTT_WriteString(0,"RD_CTRL: config model arrived \r\n");
 	if(rctx->error == NRF_SUCCESS){
 		config_model__first(&localCm);
 		random_ctr__stopTimerPeriodic();
 		random_ctr__startTimerPeriodic(localCm.frequency);
 	}

 	NRF_LOG_INFO("Arrived frequency: %d \r\n", localCm.frequency);
 	config_model__sys_write_to_BLE(&m_ravel_service, &localCm);
 }
 void random_model_ctr__random_model_departed(RavelContext *rctx){
 	//do things when model data arrives
 }

 void random_model_ctr__random_model_saved(RavelContext *rctx){
 	//do things when model data arrives
 }
 void random_model_ctr__random_model_full(){
 	//do things when model data arrives
 }
 void random_model_ctr__system_timmer(){

 }


 void random_model_ctr__system_booted(RavelContext *rctx){
 	////SEGGER_RTT_WriteString(0,"RD_CTRL: Booted event RX\r\n");
 	random_ctr__startTimerPeriodic(localCm.frequency);
 }
 void random_model_ctr__timer_single_shoot__expired(void* p_context){

 }

 uint32_t cntr=0;

 void random_model_ctr__timer_periodic__expired(void * p_context)
 {
 	//////SEGGER_RTT_WriteString(0,"RD_CTRL: Periodic expired\r\n");
     // OUR_JOB: Step 3.F, Update temperature and characteristic value.
     int32_t random = rand();
     int32_t temperature;
     RandomModel*rm;
     rm = malloc(sizeof(RandomModel));
     sd_temp_get(&temperature); // Get temperature
     rm->time = 0;
     rm->rec_id =cntr++;
     rm->temperature = temperature;
     rm->random = random;
     //////SEGGER_RTT_printf(0,"RD_CTRL: saving model %d %d %d\r\n", rm->temperature, rm->random, rm->rec_id);
     random_model__save(rm);

 }

 >>

 ravel_layer_header(space)::=<<
 /**
  * Autogenerated main file
  *
  *
  *  Created on: <space.timeDate>
  *      Author: Ravel
    */
#ifndef API_RAVEL_LAYER_H_
#define API_RAVEL_LAYER_H_
#include \<stdint.h>
#include \<string.h>

#include "api_ble.h"

void sleep_mode_enter(void);
void sys_evt_dispatch(uint32_t sys_evt);


<space.models:{model| <model.cName>__data_added();};separator="\n">


//model channel connectivity dispaching
<space.models:{model| <ble_model_connectivity(model)>};separator="\n">

#endif /* API_RAVEL_LAYER_H_ */
>>
ble_model_connectivity(model)::=<<
<if(model.streaming)>
<model.cName>__channel_enabled();
<model.cName>__channel_disabled();
<endif>
>>