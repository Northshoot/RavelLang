/**
 * Ravels layers main file
 */
ravel_layer_obj_c(space)::=<<
/**
 * Autogenerated main file
 *
 *
 *  Created on: <space.timeDate>
 *      Author: Ravel
 */
 #include "app_timer.h"
 #include "nrf_log.h"
 #include "nrf_log_ctrl.h"


 #include "ravel_layer.h"
 #include "api_timer.h"
 #include "../models.h"


/**
 * Random model dispatchers
 */
 <space.models:{model| <ble_model_connectivity_imp(model)>};separator="\n">


void random_model__data_added(){
	//this is were random model becomes part of ravel model
	//that contains necessary meta data
	//SEGGER_RTT_printf(0,"RVL_LY: dataAdded() :::: ");
	if(random_model__channel_connected) {
		RandomModel *rm;
		rm = malloc(sizeof(RandomModel));
		while (!random_model__first(rm) ){
			random_model__sys_write_to_BLE(&m_ravel_service, rm);
			nrf_gpio_pin_toggle(LED_4);
		}
	} else {
		missed_pkt++;
		nrf_gpio_pin_toggle(LED_3);
		//SEGGER_RTT_printf(0," no connection missed %d ", missed_pkt);
	}
	//SEGGER_RTT_WriteString(0," \r\n");
}

/**
 * System dispatchers
 */

void system_api__device_connected(){
	NRF_LOG_INFO("Connected to a device \r\n");
	ConfigModel cm;
	config_model__first(&cm);
	NRF_LOG_INFO("frequncy: %d \r\n", cm.frequency);
	config_model__sys_write_to_BLE(&m_ravel_service, &cm);
}

void system_api__device_disconnected(){
	NRF_LOG_INFO("Disconnected from a device \r\n");
}

void <space.models:{model| <ble_data_added(model)>};separator="\n">


 >>

 ravel_layer_header(space)::=<<
 /**
  * Autogenerated main file
  *
  *
  *  Created on: <space.timeDate>
  *      Author: Ravel
    */
#ifndef API_RAVEL_LAYER_H_
#define API_RAVEL_LAYER_H_
#include \<stdint.h>
#include \<string.h>

#include "api_ble.h"

void sleep_mode_enter(void);
void sys_evt_dispatch(uint32_t sys_evt);

void system_api__device_connected();
void system_api__device_disconnected();

<space.models:{model| void <model.cName>__data_added();};separator="\n">


//model channel connectivity dispatching
<space.models:{model| <ble_model_connectivity_decl(model)>};separator="\n">

#endif /* API_RAVEL_LAYER_H_ */
>>
ble_data_added(model)::=<<
//deal with added data
void  <model.cName>__data_added(){

}
>>
ble_model_connectivity_imp(model)::=<<
<if(model.streaming)>
bool <model.cName>__channel_connected = false;
void <model.cName>__channel_enabled(){ <model.cName>__channel_connected = true; }
void <model.cName>__channel_disabled() { <model.cName>__channel_connected = false; }
void <model.cName>__is_connected() { return <model.cName>__channel_connected; }
<endif>
>>

ble_model_connectivity_decl(model)::=<<
<if(model.streaming)>
void <model.cName>__is_connected();
void <model.cName>__channel_enabled();
void <model.cName>__channel_disabled();
<endif>
>>