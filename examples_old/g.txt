struct Accelerometer:
    x : double
    y : double
    z : double

    def is_valid(self):
        return True

struct Temperature(unit):
    value : double

    def is_value(self):
        if unit == 'F':
            return value > 32 && value < 212
        else
            return value > 0 && value < 100

newtype Temperature(unit) : Accelerometer
    def is_value(self):
        if unit == 'F':
            return self > 32 && self < 212
        else
            return self > 0 && self < 100

streaming model WaterModel(size):
    properties:
        ...

    schema:
        value = Temperature(unit='C')

streaming model AccelModel(size):
    properties:
        ...

    schema:
        time = ...
        value = Accelerometer

streaming model Random(size):
    properties:
        durable=False
        reliable=False
        records = size
        encryption = ALL(AES)
        access = W[ES], R[CS]

    schema:
        time=TimeStampField(auto_add=True)
        value = IntegerField(default=1000, min=100, max=500)


streaming model Random2(size):
    properties:
        durable=False
        reliable=False
        records = size
        encryption = ALL(AES)
        access = W[ES], R[CS]

    schema:
        time=TimeStampField(auto_add=True)
        value = DoubleField(default=1000, min=100, max=500)


source RandomSource():
    value = IntegerField()


controller Foo(randomModel : Random, random : RandomSource):
    event randomModel.arrived():
        pass

    event random.new_value():
        pass

    ...

space EmbeddedSpace:
    platform:
        language = CLang
        templates=nrf52
        system = nrf52Platform.v12


    sources:
        random = platform.system.random
        boot = platform.system.boot
        timer = platform.system.timer

    models:
        random = Random(size=10)
        frequency = UpdateFrequency(size=1)

    controllers:
        rndcnt = Randomizer(randomModel = models.random, random = sources.random)


space EmbeddedSpace:
    platform:
        language = CLang
        templates=nrf52
        system = nrf52Platform.v12


    sources:
        random = platform.system.random
        boot = platform.system.boot
        timer = platform.system.timer

    models:
        random = Random2(size=10)
        frequency = UpdateFrequency(size=1)

    controllers:
        rndcnt = Randomizer(randomModel = models.random, random = sources.random)