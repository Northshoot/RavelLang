/**
 * Autogenerated file containing data models
 *  models.h
 *
 *  Created on: 11:44:58 10/12/2016
 *      Author: Ravel
 */
#ifndef MODELS_H_
#define MODELS_H_
//base includes
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
//default buffers
#include "api/ringbuf.h"


typedef struct _rCntx {
	uint32_t error;
	void* model;
} RavelContext;


//generating structures for the models
//
typedef struct {
    uint32_t m_time ; // AUTOGEN-DOCS: Field[name: time, type: TimeStampField, model: Vibration] 
    uint32_t m_vibration ; // AUTOGEN-DOCS: Field[name: vibration, type: IntegerField, model: Vibration] 
} VibrationModel;


#define VIBRATION_MODEL_SIZE sizeof(VibrationModel) 

//
typedef struct {
    uint32_t m_time ; // AUTOGEN-DOCS: Field[name: time, type: TimeStampField, model: pPhase] 
    uint32_t m_prelim_pphase ; // AUTOGEN-DOCS: Field[name: prelim_pphase, type: IntegerField, model: pPhase] 
    uint32_t m_signal_sparsity ; // AUTOGEN-DOCS: Field[name: signal_sparsity, type: IntegerField, model: pPhase] 
} pPhaseModel;


#define P_PHASE_MODEL_SIZE sizeof(pPhaseModel) 

//
typedef struct {
    char[] m_sample ; // AUTOGEN-DOCS: Field[name: sample, type: ByteField, model: CompressedSample] 
} CompressedSampleModel;


#define COMPRESSED_SAMPLE_MODEL_SIZE sizeof(CompressedSampleModel) 

//
typedef struct {
    bool m_tx_cs ; // AUTOGEN-DOCS: Field[name: tx_cs, type: BooleanField, model: TransmitCS] 
} TransmitCSModel;


#define TRANSMIT_C_S_MODEL_SIZE sizeof(TransmitCSModel) 

//Create internal model packets
typedef struct _metaVibrationModel {
	uint32_t node_UUID;
	uint8_t origin;
	uint8_t rqACK;
	uint8_t size;
	VibrationModel model;
}VibrationModelPacket;

#define VIBRATION_MODEL_PACKET_SIZE sizeof(VibrationModelPacket) 

typedef struct _metapPhaseModel {
	uint32_t node_UUID;
	uint8_t origin;
	uint8_t rqACK;
	uint8_t size;
	pPhaseModel model;
}pPhaseModelPacket;

#define P_PHASE_MODEL_PACKET_SIZE sizeof(pPhaseModelPacket) 

typedef struct _metaCompressedSampleModel {
	uint32_t node_UUID;
	uint8_t origin;
	uint8_t rqACK;
	uint8_t size;
	CompressedSampleModel model;
}CompressedSampleModelPacket;

#define COMPRESSED_SAMPLE_MODEL_PACKET_SIZE sizeof(CompressedSampleModelPacket) 

typedef struct _metaTransmitCSModel {
	uint32_t node_UUID;
	uint8_t origin;
	uint8_t rqACK;
	uint8_t size;
	TransmitCSModel model;
}TransmitCSModelPacket;

#define TRANSMIT_C_S_MODEL_PACKET_SIZE sizeof(TransmitCSModelPacket) 

//define model command
//init model
void vibration_model__innit();
//destroy buffer
void vibration_model__destroy();

//*record functions:*/
//create record
VibrationModel vibration_model__create() ;
//save record
void vibration_model__save(VibrationModel *modelP) ;
//delete
void vibration_model__delete(int position) ;

//* record local queries */
//get record with position position
void vibration_model__get(uint32_t position, VibrationModel *rm);
//get first record
void vibration_model__get_first(VibrationModel *rm);
//get last record
void vibration_model__get_last(VibrationModel *rm);

 

//init model
void p_phase_model__innit();
//destroy buffer
void p_phase_model__destroy();

//*record functions:*/
//create record
pPhaseModel p_phase_model__create() ;
//save record
void p_phase_model__save(pPhaseModel *modelP) ;
//delete
void p_phase_model__delete(int position) ;

//* record local queries */
//get record with position position
void p_phase_model__get(uint32_t position, pPhaseModel *rm);
//get first record
void p_phase_model__get_first(pPhaseModel *rm);
//get last record
void p_phase_model__get_last(pPhaseModel *rm);

 

//init model
void compressed_sample_model__innit();
//destroy buffer
void compressed_sample_model__destroy();

//*record functions:*/
//create record
CompressedSampleModel compressed_sample_model__create() ;
//save record
void compressed_sample_model__save(CompressedSampleModel *modelP) ;
//delete
void compressed_sample_model__delete(int position) ;

//* record local queries */
//get record with position position
void compressed_sample_model__get(uint32_t position, CompressedSampleModel *rm);
//get first record
void compressed_sample_model__get_first(CompressedSampleModel *rm);
//get last record
void compressed_sample_model__get_last(CompressedSampleModel *rm);

 

//init model
void transmit_c_s_model__innit();
//destroy buffer
void transmit_c_s_model__destroy();

//*record functions:*/
//create record
TransmitCSModel transmit_c_s_model__create() ;
//save record
void transmit_c_s_model__save(TransmitCSModel *modelP) ;
//delete
void transmit_c_s_model__delete(int position) ;

//* record local queries */
//get record with position position
void transmit_c_s_model__get(uint32_t position, TransmitCSModel *rm);
//get first record
void transmit_c_s_model__get_first(TransmitCSModel *rm);
//get last record
void transmit_c_s_model__get_last(TransmitCSModel *rm);

 

//end of autogenerated code

#endif /* MODELS_H_ */