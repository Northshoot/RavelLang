replicate model Conflict()
    properties:
        durable = False

    schema:
        timestamp=TimeDateField(auto_add=True)
        origin = IntegerField()
        value = IntegerField()

controller EmbeddedController(tier):
    boot_event=tier.platform.boot
    timer = tier.platform.timer
    conflict = tier.models.conflict

    event boot_event(context ctx):
        if ctx.error is SUCCESS:
            timer.start_periodic(1000)

    event timer.fired(Context ctx):
        c = conflict.create()
        c.value = 10
        c.save()

    event conflict.arrived(Context ctx):
        if ctx.error is SUCCESS:
            new_rec = ctx.model
            last_rec = conflict.get()
            if new_rec.timestamp - 10000 > last_rec.timestamp:
                new_rec.save()

controller GtwController(tier):
    boot=tier.platform.boot
    timer = tier.platform.timer
    conflict = tier.models.conflict

    event conflict.arrived(Context ctx):
        if ctx.error is SUCCESS:
            new_rec = ctx.model
            last_rec = conflict.get()
            //cloud always overrulles other tiers
            if new_rec.origin == tiers.CloudSpace:
                new_rec.save()
            else if new_rec.timestamp - 10000 > last_rec.timestamp:
                    new_rec.save()

controller CloudController(tier):
    conflict = tier.models.conflict

    event conflict.arrived(Context ctx):
        if ctx.error is SUCCESS:
            new_rec = ctx.model
            last_rec = conflict.get()
            //we allow different delays from different ters to overide the value
            if new_rec.origin == tiers.GtwSpace:
                new_rec.timestamp - 10000 > last_rec.timestamp:
                    new_rec.save()
            else if new_rec.origin == tiers.EmbeddedSpace:
                new_rec.timestamp - 50000 > last_rec.timestamp:
                    new_rec.save()

space EmbeddedSpace:
    platform:
        language = clang
        templates=nrf52
        boot=nrf52.apiv1.boot
        timer=nrf52.apiv1.timer

    models:
	    conflict = Conflict()

    controllers:
        e_ctr=EmbeddedController(tier=self)


space GatewaySpace:
    platform:
        system = android.api23
        templates = android23

    models:
        conflict = Conflict()

    controllers:
        g_ctr = GtwController(tier=self)


space CloudSpace:
    platform:
	    language = python
	    templates = django2
	    system = django.apiv2

    models:
	    conflict = Conflict()

    controllers:
	    c_ctr = CloudController(tier=self)

    sinks:
        db = sqlite3
