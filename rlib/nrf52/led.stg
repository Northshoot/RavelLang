import "org/stanford/ravel/api/lang/c/tmpl/common.stg"

extra_cflags() ::=<<
>>
extra_ldflags() ::=<<
>>

extra_includes() ::=<<
>>

extra_src(path) ::=<<
<path>/drivers_nrf/timer/nrf_drv_timer.c
<path>/libraries/util/sdk_errors.c
>>

c_file(includes,name,interface) ::=<<

<begin_source(name)>

<includes:do_include(); separator="\n">
#include "boards.h"
#define NRF_LOG_MODULE_NAME "LED"

#include "nrf_log.h"
#include "nrf_log_ctrl.h"
int LED_ID = <interface.configuration.led_id; format="literal">;

void
ravel_generated_<name; format="function">_init(<name> *self, int instance_id<append_parameter_list(interface.baseModel.parameters)>)
{
    bsp_board_leds_init();
    NRF_LOG_INFO("INIT!\r\n");
}
void
ravel_generated_<name; format="function">_finalize(<name> *self)
{
//nothing to do
}

void
ravel_generated_<name; format="function">_on()
{
    bsp_board_led_on(LED_ID);
}
void
ravel_generated_<name; format="function">_off()
{
    bsp_board_led_off(LED_ID);
}
void
ravel_generated_<name; format="function">_toggle()
{
    bsp_board_led_invert(LED_ID);
}
>>

h_file(includes,name,interface) ::=<<
<begin_header("LIBRARY", name)>
/* Forward declare our controller class before we include the model headers */
typedef struct s_<name> <name>;
<includes:do_include(); separator="\n">

<begin_extern_c()>

typedef struct s_<name> {
    int dummy;
} <name>;

void ravel_generated_<name; format="function">_init(<name> *self, int instance_id<append_parameter_list(interface.baseModel.parameters)>);
void ravel_generated_<name; format="function">_finalize(<name> *self);

void ravel_generated_<name; format="function">_on();
void ravel_generated_<name; format="function">_off();
void ravel_generated_<name; format="function">_toggle();
<end_extern_c()>
<end_header("", name)>
>>
