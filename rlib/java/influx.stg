import "edu/stanford/ravel/api/lang/java/tmpl/common.stg"


file(package,imports,name,interface) ::=<<
package <package>;

import java.util.List;

import org.influxdb.InfluxDB;
import org.influxdb.InfluxDB.ConsistencyLevel;
import org.influxdb.InfluxDBFactory;
import org.influxdb.dto.BatchPoints;
import org.influxdb.dto.Point;
import org.influxdb.dto.Pong;
import org.influxdb.dto.Query;
import org.influxdb.dto.QueryResult;


<imports:do_import()>

public class <name> {
    <interface.controllerList:{c|private <c.component.name> ctr_<c.varName>;}; separator="\n">

    private final static String TAG = <name>.class.getSimpleName();
    private final int __id;
   	private Pong pong;
   	private InfluxDB influxDB = null;
   	private String dbName = "harmony";
   	private String url =  <interface.baseInterface.configuration.remote; format="literal">;
   	private String database =  <interface.baseInterface.configuration.database; format="literal">;
   	private String table =  <interface.baseInterface.configuration.table; format="literal">;
   	//private String user =  <interface.baseInterface.configuration.uname.value.name; format="literal">;
   	//private String psw =  <interface.baseInterface.configuration.psw; format="literal">;
   	private String user = "admin";
   	private String psw = "egg9Dxmn";


    public <name>(AppDispatcher dispatcher, int instanceId<append_parameter_list(interface.baseInterface.parameters)>) {
        __id = instanceId;


    }

    // Setter methods for AppDispatcher
    <interface.controllerList:set_controller_method(); separator="\n">


 	//try to create connection to the server
 	private boolean createConnection(){
 		//Establish connection
 		influxDB = InfluxDBFactory.connect(url, user, psw);
 		//test ping
 		try{
 			long responseTime = testConnection();
 			System.out.println("Connected to " + dbName + " db, response time " + responseTime + "ms");
 			return true;
 		} catch (RuntimeException e){
 			System.out.println("Connection timeouted");
 			return false;
 		}
 	}

 	public long testConnection(){
 		pong = influxDB.ping();
 		return pong.getResponseTime();
 	}

	public void pushData(String table, String name, String geohash, double temperature, double humidity){
		if ( influxDB == null ){
			if (!createConnection())
				return;
		}
		BatchPoints batchPoints = BatchPoints
				.database(dbName)
				.tag("async", "true")
				.retentionPolicy("autogen")
				.consistency(ConsistencyLevel.ALL)
				.build();

		Point point1 = Point.measurement(table)
							.tag("device_name", name)
							.tag("geohash", geohash)
							.addField("temperature", temperature)
							.addField("humidity", humidity)
							.build();

		batchPoints.point(point1);
		influxDB.write(batchPoints);
	}

 	public void closeConnection(){
 		influxDB.close();
 	}

}

>>