import "edu/stanford/ravel/api/lang/java/tmpl/common.stg"


type_to_json_type_dict ::=[
    "int": ".getAsInt()",
    "boolean": ".getAsBoolean()",
    "java.lang.String": ".getAsString()",
    "double": ".getAsDouble()",
    "byte": "getAsByte()",
    "java.util.Date": "Timestamp",
    default: {<type>}
]
type_to_json_type(type) ::=<<
<type_to_json_type_dict.(type)>
>>


file(package,imports,name,interface) ::=<<
package <package>;

import java.io.InputStream;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.io.IOException;
import java.net.ConnectException;

import org.stanford.ravel.rrt.tiers.HttpBaseUrlConnection;
<imports:do_import()>

public class <name> extends HttpBaseUrlConnection{
    <interface.controllerList:{c|private <c.component.name> ctr_<c.varName>;}; separator="\n">

    private final static String TAG = <name>.class.getSimpleName();
    private final int __id;
    private String urlName = "<interface.baseInterface.configuration.remote>";
    private String type = "application/x-www-form-urlencoded";
    private AppDispatcher dispatcher;

    public <name>(AppDispatcher dispatcher, int instanceId<append_parameter_list(interface.baseInterface.parameters)>) {
        super();
        __id = instanceId;
        this.dispatcher = dispatcher;


    }

    // Setter methods for AppDispatcher
    <interface.controllerList:set_controller_method(); separator="\n">


    public void addDevice(<interface.baseInterface.models.table_local.name>.Record record){
            // TODO: push data to django



        }

    public void getDevice(<interface.baseInterface.models.table_remote.name>.Record record){
    System.out.println(TAG + " :: get device:");
         try {
        Response rr = super.writePost(this.urlName, "device_id=" + Integer.toString(record.device_idd));
        JsonArray gson = new Gson().fromJson(rr.content, JsonArray.class);
        JsonObject jfields = (JsonObject) gson.get(0);
        //JsonObject jfields = (JsonObject)jobj.get("fields").getAsJsonObject();
        System.out.println(TAG + " :: return:"+ jfields);
        <interface.baseInterface.models.table_remote.fields:{f|record.<f.name>=jfields.get("<f.name>")<type_to_json_type(f.type)>;}; separator="\n">

        } catch (ConnectException ex) {
         } catch (IOException ex) {
         }


}
}

>>